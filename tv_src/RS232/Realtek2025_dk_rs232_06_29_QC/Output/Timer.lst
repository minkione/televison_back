C51 COMPILER V8.16   TIMER                                                                 04/05/2012 11:15:25 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Output\Timer.obj
COMPILER INVOKED BY: D:\安装文件\keil\C51\BIN\C51.EXE Code\Timer.c OPTIMIZE(9,SIZE) BROWSE DEFINE(CMOS_CHIP_TYPE=PCB_202
                    -5LV13) PRINT(.\Output\Timer.lst) OBJECT(.\Output\Timer.obj)

line level    source

   1          //----------------------------------------------------------------------------------------------------
   2          // ID Code      : Timer.c No.0001
   3          // Update Note  : 
   4          //
   5          //----------------------------------------------------------------------------------------------------
   6          
   7          #define __TIMER__
   8          
   9          #include "Header\Include.h"
  10          
  11          
  12          //--------------------------------------------------
  13          // Description  : Check if it's time to execute events
  14          // Input Value  : None
  15          // Output Value : None
  16          //--------------------------------------------------
  17          void CTimerHandler(void)
  18          {
  19   1          BYTE timereventcnt;
  20   1      
  21   1          for(timereventcnt=0;timereventcnt<_MAX_EVENT_AMOUNT;timereventcnt++)
  22   1          {
  23   2              if(TimerEvent[timereventcnt].Time == 0)
  24   2              {
  25   3                  bTimer0Ctrl = _TRUE;
  26   3                  TimerEvent[timereventcnt].Time = _INACTIVE_TIMER_EVENT;
  27   3                  bTimer0Ctrl = _FALSE;
  28   3                  (*TimerEvent[timereventcnt].Event)();
  29   3              }
  30   2          }
  31   1      }
  32          
  33          //--------------------------------------------------
  34          // Description  : Set up a timer for an event. If the event is exist, 
  35          //                this function is ignored and do not change the executing time.
  36          // Input Value  : usTime    --> Unit in 10ms, range in 0.01 ~ 655.3 sec
  37          //                Event     --> Execute Event while timeup
  38          // Output Value : None
  39          //--------------------------------------------------
  40          void CTimerActiveTimerEvent(DWORD usTime, void (*Event)())
  41          {
  42   1          BYTE timereventcnt;
  43   1      
  44   1          for(timereventcnt=0;timereventcnt<_MAX_EVENT_AMOUNT;timereventcnt++)
  45   1          {
  46   2              if((TimerEvent[timereventcnt].Time != _INACTIVE_TIMER_EVENT) && (TimerEvent[timereventcnt].Event =
             -= Event))
  47   2                  return;
  48   2          }
  49   1      
  50   1          for(timereventcnt=0;timereventcnt<_MAX_EVENT_AMOUNT;timereventcnt++)
  51   1          {
  52   2              if(TimerEvent[timereventcnt].Time == _INACTIVE_TIMER_EVENT)
  53   2              {
C51 COMPILER V8.16   TIMER                                                                 04/05/2012 11:15:25 PAGE 2   

  54   3                  bTimer0Ctrl = _TRUE;
  55   3                  TimerEvent[timereventcnt].Time = usTime;
  56   3                  bTimer0Ctrl = _FALSE;
  57   3                  TimerEvent[timereventcnt].Event = Event;
  58   3                  break;
  59   3              }
  60   2          }
  61   1      }
  62          
  63          //--------------------------------------------------
  64          // Description  : Reactive a timer for an event. If the event is exist,
  65          //                this function will reset the executing time and restart.
  66          // Input Value  : usTime    --> Unit in 10ms, range in 0.01 ~ 655.3 sec
  67          //                Event     --> Execute Event while timeup
  68          // Output Value : None
  69          //--------------------------------------------------
  70          void CTimerReactiveTimerEvent(DWORD usTime, void (*Event)())
  71          {
  72   1          BYTE timereventcnt;
  73   1      
  74   1          for(timereventcnt=0;timereventcnt<_MAX_EVENT_AMOUNT;timereventcnt++)
  75   1          {
  76   2              if((TimerEvent[timereventcnt].Time != _INACTIVE_TIMER_EVENT) && (TimerEvent[timereventcnt].Event =
             -= Event))
  77   2              {
  78   3                  bTimer0Ctrl = _TRUE;
  79   3                  TimerEvent[timereventcnt].Time = usTime;
  80   3                  bTimer0Ctrl = _FALSE;
  81   3                  return;
  82   3              }
  83   2          }
  84   1      
  85   1          CTimerActiveTimerEvent(usTime, Event);
  86   1      }
  87          
  88          //--------------------------------------------------
  89          // Description  : Cancel an event
  90          // Input Value  : Event     --> Event which we want to cancel
  91          // Output Value : None
  92          //--------------------------------------------------
  93          void CTimerCancelTimerEvent(void (*Event)())
  94          {
  95   1          BYTE timereventcnt;
  96   1      
  97   1          for(timereventcnt=0;timereventcnt<_MAX_EVENT_AMOUNT;timereventcnt++)
  98   1          {
  99   2              if(TimerEvent[timereventcnt].Event == Event)
 100   2              {
 101   3                  bTimer0Ctrl = _TRUE;
 102   3                  TimerEvent[timereventcnt].Time = _INACTIVE_TIMER_EVENT;
 103   3                  bTimer0Ctrl = _FALSE;
 104   3              }
 105   2          }
 106   1      }
 107          
 108          //--------------------------------------------------
 109          // Description  : Initial timer and events. We have to run this function at firmware startup
 110          // Input Value  : None
 111          // Output Value : None
 112          //--------------------------------------------------
 113          void CTimerInitialTimerEvent(void)
 114          {
C51 COMPILER V8.16   TIMER                                                                 04/05/2012 11:15:25 PAGE 3   

 115   1          BYTE timereventcnt;
 116   1      
 117   1          for(timereventcnt=0;timereventcnt<_MAX_EVENT_AMOUNT;timereventcnt++)
 118   1          {
 119   2              TimerEvent[timereventcnt].Time = _INACTIVE_TIMER_EVENT;
 120   2          }
 121   1      
 122   1          TR0 = 1;
 123   1      }
 124          
 125          //--------------------------------------------------
 126          // Description  : Decrease timer counts while 10ms Interrupt is up
 127          // Input Value  : None
 128          // Output Value : None
 129          //--------------------------------------------------
 130          void CTimerDecreaseTimerCnt(void)
 131          {
 132   1          BYTE timerdeccnt;
 133   1      
 134   1          for(timerdeccnt=0;timerdeccnt<_MAX_EVENT_AMOUNT;timerdeccnt++)
 135   1          {
 136   2              if((TimerEvent[timerdeccnt].Time != _INACTIVE_TIMER_EVENT) && (TimerEvent[timerdeccnt].Time != 0))
 137   2              {
 138   3                  TimerEvent[timerdeccnt].Time--;
 139   3              }
 140   2          }
 141   1      }
 142          
 143          //----------------------------------------------------------------------------------------------------
 144          // Description  : Count down event process
 145          // Input Value  : pEventCnt --> Event counter
 146          //                ucWaitCnt --> Count down number (Max: 254)
 147          //                Event     --> Execute Event while counter is zero
 148          // Output Value : None
 149          //----------------------------------------------------------------------------------------------------
 150          void CTimerCountDownEventProc(BYTE *pEventCnt, BYTE ucWaitCnt, void (*Event)(void))
 151          {
 152   1          if(*pEventCnt == _INACTIVE_COUNTDOWN_EVENT)
 153   1          {
 154   2              *pEventCnt = ucWaitCnt;
 155   2          }
 156   1          else if(*pEventCnt == 0)
 157   1          {
 158   2              *pEventCnt = _INACTIVE_COUNTDOWN_EVENT;
 159   2              Event();
 160   2          }
 161   1          else
 162   1          {
 163   2              *pEventCnt = *pEventCnt - 1;
 164   2          }
 165   1      }
 166          
 167          //----------------------------------------------------------------------------------------------------
 168          // Description  : Polling Event Process
 169          // Input Value  : ucTimeout --> Timeout number (Max: 255 ms)
 170          //                Event     --> Polling event. This event has to return _TRUE or _FALSE
 171          // Output Value : Return _TRUE while polling success, _FALSE for timeout
 172          //----------------------------------------------------------------------------------------------------
 173          bit CTimerPollingEventProc(BYTE ucTimeout, bit (*Event)(void))
 174          {
 175   1          do
 176   1          {
C51 COMPILER V8.16   TIMER                                                                 04/05/2012 11:15:25 PAGE 4   

 177   2              CTimerDelayXms(1);
 178   2      
 179   2              if(Event())
 180   2              {
 181   3                  return _TRUE;
 182   3              }
 183   2          }
 184   1          while(--ucTimeout);
 185   1      
 186   1          return _FALSE;
 187   1      }
 188          
 189          //--------------------------------------------------
 190          // Description  : Hold program for 0 ~ 65535 ms
 191          // Input Value  : usNum     --> Delay time
 192          // Output Value : None
 193          //--------------------------------------------------
 194          void CTimerDelayXms(WORD usNum)
 195          {
 196   1          if(usNum)
 197   1          {
 198   2              bNotifyTimer0Int = _FALSE;
 199   2      
 200   2              while(_TRUE)
 201   2              {
 202   3                  if(bNotifyTimer0Int)
 203   3                  {
 204   4                      bNotifyTimer0Int = _FALSE;
 205   4      
 206   4                      if(--usNum)
 207   4                          TR0 = _ON;
 208   4                      else
 209   4                          return;
 210   4                  }
 211   3              }
 212   2          }
 213   1      }
 214          
 215          //--------------------------------------------------
 216          // Description  : Hold until the specified event occurs
 217          // Input Value  : ucEvent   --> Specified event
 218          // Output Value : Return _TRUE while timeout
 219          //--------------------------------------------------
 220          bit CTimerWaitForEvent(BYTE ucEvent)
 221          {
 222   1          BYTE temp;
 223   1          BYTE timeoutcnt = 30;                   // 30ms timeout
 224   1      
 225   1          CScalerSetByte(_STATUS1_03, 0x00);      // Clear status (status register will be cleared after write)
 226   1      
 227   1          bNotifyTimer0Int = _FALSE;
 228   1      
 229   1          do
 230   1          {
 231   2              if(bNotifyTimer0Int)
 232   2              {
 233   3                  bNotifyTimer0Int  = _FALSE;
 234   3      
 235   3                  if(--timeoutcnt)
 236   3                      TR0 = _ON;
 237   3              }
 238   2      
C51 COMPILER V8.16   TIMER                                                                 04/05/2012 11:15:25 PAGE 5   

 239   2              CScalerRead(_STATUS1_03, 1, &temp, _NON_AUTOINC);
 240   2            
 241   2              temp &= ucEvent;
 242   2          }
 243   1          while((temp == 0) && (timeoutcnt != 0));
 244   1      
 245   1          return timeoutcnt ? _FALSE : _TRUE;
 246   1      }
 247          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    597    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      36
   IDATA SIZE       =     35    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
