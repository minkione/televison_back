C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE TB1334
OBJECT MODULE PLACED IN .\Output\TB1334.obj
COMPILER INVOKED BY: D:\安装文件\keil\C51\BIN\C51.EXE Lib\TB1334.C OPTIMIZE(9,SIZE) BROWSE DEFINE(CMOS_CHIP_TYPE=PCB_202
                    -5LV13) PRINT(.\Output\TB1334.lst) OBJECT(.\Output\TB1334.obj)

line level    source

   1          ////////////////////////////////////////////////////////////////////////////
   2          //         Copyright of Vector Co.,Ltd.                                   //
   3          //                                                                        //
   4          //                                                                        //
   5          //                       Video Decoder function                           //
   6          //   Ver: 6.20                                                            //
   7          //   Create file time: 2006.10.6                                          //
   8          //   End modify time: 2007.2.27                                           //
   9          //   For RTD2523B/RTD2553V/RTD2525L                                       //
  10          ////////////////////////////////////////////////////////////////////////////
  11          #include "Header\Include.h"
  12          
  13          
  14          #if(_VIDEO_CHIP == _VDC_TB1334)
  15          
  16          #define _TB1334_VIDEODEVICE               0x88
  17          
  18          void CNotUseFunc(void);
  19          
  20          unsigned char VideoDecAddress = 0;
  21          
  22          
  23          //==============================================================================  
  24          // Input Value : Null
  25          // Output Value: Null
  26          // Description : 
  27          //============================================================================== 
  28          void Nop(void)  // Delay 8us
  29          {
  30   1          _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
  31   1          _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
  32   1          _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
  33   1      }
  34          
  35          //==============================================================================  
  36          // Input Value : Null
  37          // Output Value: Null
  38          // Description : 
  39          //============================================================================== 
  40          void gmi_CDelay80Us(void)  // Delay 80us
  41          {
  42   1          do
  43   1          {
  44   2              Nop();
  45   2          Nop();
  46   2          Nop();
  47   2          Nop();
  48   2          Nop();
  49   2          Nop();
  50   2          Nop();
  51   2              Nop();
  52   2              Nop();
  53   2              Nop();
  54   2          }while(0);   
C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 2   

  55   1      }  
  56          unsigned char code tInitialVDCdata[] =
  57          {           
  58                 0x4A,0x26, 0x40, 0x14, 0x40, 0x01, 0x02, 0x00,
  59                 0x00,0x00, 0x40, 0x80, 0x9f, 0x6e, 0x0c, 0x80, 
  60               0x31,0x00, 0x04, 0x87, 0x40, 0x00, 0xc0, 0x88,
  61               0x20,0x00, 0x58, 0x40, 0x20, 0x20, 0x10, 0x10,
  62               0x40,0x00, 0x01,   
  63          };
  64          
  65          void gmi_CI2CWriteVDCByte(const unsigned char ucAddress, const unsigned char ucWriteValue)
  66          {
  67   1          unsigned char ucTemp[1];
  68   1      
  69   1          ucTemp[0] = ucWriteValue;
  70   1          CI2cWrite(_TB1334_VIDEODEVICE, ucAddress, 1, ucTemp);  
  71   1      }
  72          
  73          unsigned char gmi_CI2CReadVDCByte(const unsigned char ucAddress)
  74          {
  75   1          unsigned char ucTemp[3] = 0;
  76   1      
  77   1      
  78   1          CI2cRead(_TB1334_VIDEODEVICE, 0x00, 3, ucTemp);
  79   1      
  80   1          switch(ucAddress)
  81   1          {
  82   2          case 0x00:   return ucTemp[0];
  83   2          case 0x01:   return ucTemp[1];
  84   2          case 0x02:   return ucTemp[2];
  85   2          }
  86   1      }
  87          
  88          unsigned char gmi_CVideoCurrentColor(bit bMode)
  89          {
  90   1          unsigned char ucTemp[3] = 0;
  91   1      
  92   1          CI2cRead(_TB1334_VIDEODEVICE, 0x00, 3, ucTemp);
  93   1      
  94   1      
  95   1          if (((ucTemp[0] & 0x40) != 0x40 && VideoDecAddress == 1) || // TV
  96   1              ((ucTemp[0] & 0x20) != 0x20 && VideoDecAddress == 0))   // AV/SV
  97   1              return 0;               
  98   1          else   
  99   1          {     //  eric 1205 mdify for tv change mode 
 100   2              if (!bMode)
 101   2              {
 102   3                 if (ucTemp[1]&0x80)  // 60Hz
 103   3                     return 0x01;
 104   3                 else
 105   3                     return 0x02;
 106   3              }   
 107   2      
 108   2              ucTemp[0] = (ucTemp[0] >> 2) & 0x07;
 109   2              switch(ucTemp[0])
 110   2              {
 111   3                  case 0x00:  // No color
 112   3                  case 0x07:  // N/A     
 113   3                      return 0x00;
 114   3      
 115   3                  case 0x02:  // PAL M
 116   3                  case 0x04:  // NTSC 358
C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 3   

 117   3                  case 0x05:  // NTSC 443
 118   3                      return 0x01; // 60Hz
 119   3      
 120   3      
 121   3                  case 0x01:  // PAL 4.43 
 122   3                  case 0x03:  // PAL N   
 123   3                  case 0x06:  // SECAM   
 124   3                      return 0x02; // 50Hz
 125   3              }
 126   2          }
 127   1      
 128   1          bMode = 0;
 129   1      }
 130          
 131          void gmi_CInitialVDC(void)
 132          {
 133   1          unsigned char uctemp[3];
 134   1      
 135   1          CI2cRead(_TB1334_VIDEODEVICE, 0x00, 3, uctemp);
 136   1          do
 137   1          {
 138   2              gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();
 139   2              gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();
 140   2              CI2cRead(_TB1334_VIDEODEVICE, 0x00, 3, uctemp);
 141   2          }while((uctemp[0] & 0x80));
 142   1                                
 143   1          for(uctemp[0] = 0x00; uctemp[0] < 0x23; uctemp[0]++)
 144   1          {
 145   2              gmi_CI2CWriteVDCByte(uctemp[0], tInitialVDCdata[uctemp[0]]);
 146   2              gmi_CDelay80Us();
 147   2          }
 148   1                                  
 149   1          gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();
 150   1          gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();
 151   1      
 152   1          uctemp[0] = 0;
 153   1      
 154   1              if(1 == uctemp[0])  
 155   1              {
 156   2             CNotUseFunc();
 157   2              }
 158   1      }
 159          
 160          //==============================================================================  
 161          // Input Value : Null
 162          // Output Value: Null
 163          // Description : 
 164          //============================================================================== 
 165          void gmi_CSetVDCFreeRunMode(const unsigned char ucMode)  // eric 0308 add
 166          {
 167   1          unsigned char uctemp;
 168   1      
 169   1          switch(ucMode)
 170   1          {
 171   2          default:
 172   2          case _VDC_FREE_RUN_MODE_TO_AUTO: // Set output coast frequency to auto mode
 173   2              uctemp = 0x00 | 0x01;
 174   2              break;
 175   2      
 176   2          case _VDC_FREE_RUN_MODE_TO_60HZ: // Set output coast frequency to 60 HZ mode
 177   2              uctemp = (0x02 << 5) | 0x01;
 178   2              break;
C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 4   

 179   2      
 180   2          case _VDC_FREE_RUN_MODE_TO_50HZ:  // Set output coast frequency to 50HZ mode
 181   2              uctemp = (0x01 << 5) | 0x01;
 182   2              break;
 183   2          }
 184   1      
 185   1          gmi_CI2CWriteVDCByte(0x15, uctemp); // Set output coast frequency to 50HZ mode   
 186   1      }
 187          
 188          //==============================================================================  
 189          // Routine Name: 
 190          // Input Value : 
 191          // Output Value: 
 192          // Description : 
 193          //============================================================================== 
 194          void gmi_CVDCOutputDisable(void)
 195          {
 196   1      
 197   1      }
 198          
 199          //==============================================================================  
 200          // Routine Name: bit CModeLocked(void)
 201          // Input Value : Null
 202          // Output Value: 0 --> No locked       1 --> Locked
 203          // Description : Check video lock
 204          //============================================================================== 
 205          bit gmi_CModeLocked(void)
 206          {                    
 207   1          unsigned char ucTemp = gmi_CI2CReadVDCByte(0x00);
 208   1          
 209   1      
 210   1          if (((ucTemp & 0x40) != 0x40 && VideoDecAddress == 1) || 
 211   1              ((ucTemp & 0x20) != 0x20 && VideoDecAddress == 0))   
 212   1              return 0;               
 213   1          else
 214   1              return 1;  // Signal detected
 215   1          
 216   1      }
 217          
 218          
 219          //-------------------------------------------
 220          // 
 221          //       
 222          //-------------------------------------------
 223          void gmi_CSelectInputChannel(unsigned char ucYCrChannel, unsigned char ucCbChannel)
 224          {                                                              
 225   1          unsigned char uctemp = 0;
 226   1          
 227   1           
 228   1           uctemp = (ucYCrChannel & 0xf0) | 0x03;
 229   1                              
 230   1           ucYCrChannel &= 0x0f;
 231   1           if (ucYCrChannel != 0x0f)  
 232   1           {
 233   2               switch(ucYCrChannel)
 234   2               {
 235   3               case _YCBCR2_INPUT:
 236   3               case _YCBCR3_INPUT:
 237   3                   gmi_CI2CWriteVDCByte(0x06, 0x02);  
 238   3                   uctemp |= 0x04;
 239   3                   break;
 240   3      
C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 5   

 241   3               case _SCART_INPUT:
 242   3                   gmi_CI2CWriteVDCByte(0x06, 0x02); 
 243   3                   uctemp &= 0xFD;  
 244   3                   break;
 245   3      
 246   3               default:
 247   3                   uctemp |= 0x10;        
 248   3          
 249   3                   if (ucYCrChannel == _CHROMA_C1)
 250   3                       ucYCrChannel = 0x20;
 251   3                   else
 252   3                       ucYCrChannel = 0xA0;
 253   3          
 254   3                   gmi_CI2CWriteVDCByte(0x1D, ucYCrChannel); 
 255   3          
 256   3                   gmi_CI2CWriteVDCByte(0x03, 0x60);  
 257   3                   gmi_CI2CWriteVDCByte(0x06, 0x00);  
 258   3                   break;
 259   3               }
 260   2           }
 261   1           else 
 262   1           {                  
 263   2               gmi_CI2CWriteVDCByte(0x06, 0x02);  
 264   2               uctemp |= 0x08;
 265   2           }     
 266   1      
 267   1           gmi_CI2CWriteVDCByte(0x07, uctemp);    
 268   1           ucCbChannel = ucCbChannel;
 269   1      }
 270          
 271          //==============================================================================  
 272          // Input Value : Null
 273          // Output Value: Null
 274          // Description : 
 275          //============================================================================== 
 276          void gmi_CAdjustVDCBrightness(const unsigned char ucVDCBrightness)
 277          {
 278   1      
 279   1      
 280   1          gmi_CI2CWriteVDCByte(0x01, (unsigned int)(ucVDCBrightness*0x7F)/100);  // Set VDC brightness
 281   1      }
 282          
 283          //==============================================================================  
 284          // Input Value : Null
 285          // Output Value: Null
 286          // Description : 
 287          //============================================================================== 
 288          void gmi_CAdjustVDCContrast(const unsigned char ucVDCContrast)
 289          {
 290   1      
 291   1          gmi_CI2CWriteVDCByte(0x00, (((unsigned int)ucVDCContrast*0x7F)/100)); // Set VDC contrast
 292   1      }
 293          
 294          //==============================================================================  
 295          // Input Value : Null
 296          // Output Value: Null
 297          // Description : 
 298          //============================================================================== 
 299          void gmi_CAdjustVDCSaturation(const unsigned char ucVDCSaturation)
 300          {
 301   1      
 302   1          gmi_CI2CWriteVDCByte(0x02, (((unsigned int)ucVDCSaturation*0x7F)/100)); // Set VDC saturation
C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 6   

 303   1      }
 304          
 305          //==============================================================================  
 306          // Input Value : Null
 307          // Output Value: Null
 308          // Description : 
 309          //============================================================================== 
 310          void gmi_CAdjustVDCHue(const unsigned char ucVDCHue)
 311          {
 312   1          unsigned char uctemp = gmi_CVideoCurrentColor(0);
 313   1          unsigned char temp = 0;
 314   1      
 315   1          temp = (unsigned int)(ucVDCHue*0x7F)/100;
 316   1          uctemp = (uctemp == 1) ? 0x00 : 0x80;
 317   1      
 318   1          gmi_CI2CWriteVDCByte(0x04, temp | uctemp);  // Set VDC HUE
 319   1      }
 320          
 321          //==============================================================================  
 322          //                              TV
 323          
 324          // Definitions for TV color
 325          #define _LIB_TV_NTSC_M             0x00    // 60Hz Sound 4.5M  NTSC M
 326          #define _LIB_TV_NTSC_4_BG          0x01    // 60Hz Sound 5.5M  NTSC 4/BG
 327          #define _LIB_TV_NTSC_4_DK          0x02    // 60Hz Sound 6.5M  NTSC 4/DK
 328          #define _LIB_TV_NTSC_4_I           0x03    // 60Hz Sound 6.0M  NTSC 4/I
 329          #define _LIB_TV_PAL_M              0x04    // 60Hz Sound 4.5M  PAL M
 330          
 331          #define _LIB_TV_PAL_BG             0x05    // 50Hz Sound 5.5M  PAL B/G
 332          #define _LIB_TV_PAL_I              0x06    // 50Hz Sound 6.0M  PAL I
 333          #define _LIB_TV_PAL_DK             0x07    // 50Hz Sound 6.5M  PAL D/K
 334          #define _LIB_TV_PAL_N              0x08    // 50Hz Sound 4.5M  PAL N
 335          
 336          #define _LIB_TV_SECAM_BG           0x09    // 50Hz Sound 5.5M  SECAM B/G
 337          #define _LIB_TV_SECAM_DK           0x0a    // 50Hz Sound 6.5M  SECAM D/K
 338          #define _LIB_TV_SECAM_L            0x0b    // 50Hz Sound 6.5M  SECAM L
 339          #define _LIB_TV_SECAM_LL           0x0c    // 50Hz Sound 6.5M  Secam L'
 340          
 341          // Pif freq
 342          #define _PIF_45_75_MHZ             0x00
 343          #define _PIF_39_5_MHZ              0x20
 344          #define _PIF_38_9_MHZ              0x40
 345          #define _PIF_38_0_MHZ              0x60
 346          #define _PIF_34_2_MHZ              0x80
 347          #define _PIF_33_9_MHZ              0xA0
 348          
 349          //============================================================================== 
 350          // ucMode:  _SEARCH_CHANNEL_MODE/_NORMAL_MODE
 351          // _SEARCH_CHANNEL_MODE 0x00
 352          // _NORMAL_MODE         0x80
 353          //============================================================================== 
 354          void CSetPifFreq(const unsigned char ucAFTMode, const unsigned int PifFreq)
 355          {
 356   1          unsigned char ucTemp = (ucAFTMode == 0x00) ? 0x00 : 0x02;
 357   1                   
 358   1          ucTemp |= 0x0C;
 359   1          switch(PifFreq)
 360   1          {
 361   2          case 45750:       ucTemp |= _PIF_45_75_MHZ;       break;
 362   2          case 39500:       ucTemp |= _PIF_39_5_MHZ;        break;
 363   2          case 38900:       ucTemp |= _PIF_38_9_MHZ;        break;
 364   2          case 38000:       ucTemp |= _PIF_38_0_MHZ;        break;
C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 7   

 365   2          case 34200:       ucTemp |= _PIF_34_2_MHZ;        break;
 366   2          case 33900:       ucTemp |= _PIF_33_9_MHZ;        break;
 367   2          }
 368   1      
 369   1          gmi_CI2CWriteVDCByte(0x0D, ucTemp); 
 370   1              
 371   1      }
 372          
 373          //============================================================================== 
 374          // bSelect:      0: -> PAL           1: SECAM L
 375          //CarrierSelect: 0: Split carrier    1: Inter carrier
 376          //============================================================================== 
 377          void CSelectPalOrSecamL(bit bSelect, const unsigned char ucAFTMode, const unsigned char CarrierSelect)
 378          {
 379   1          if (bSelect)  
 380   1          {
 381   2              gmi_CI2CWriteVDCByte(0x0C, 0x07);  
 382   2              if (ucAFTMode == 0x00)  
 383   2                 gmi_CI2CWriteVDCByte(0x12, 0x07); 
 384   2              else                   
 385   2                 gmi_CI2CWriteVDCByte(0x12, 0x05); 
 386   2              gmi_CI2CWriteVDCByte(0x1A, 0x18);  
 387   2          }
 388   1          else  // PAL
 389   1          {
 390   2              if (CarrierSelect)
 391   2                  gmi_CI2CWriteVDCByte(0x0C, 0x9F);  
 392   2              else
 393   2                  gmi_CI2CWriteVDCByte(0x0C, 0x1F);  
 394   2              gmi_CI2CWriteVDCByte(0x12, 0x00);  
 395   2              gmi_CI2CWriteVDCByte(0x1A, 0x58);  
 396   2          }
 397   1      }
 398          
 399          //============================================================================== 
 400          // ucMode->_NORMAL_MODE->AFT-S range of the AFT-W read narrow
 401          //       ->_SEARCH_CHANNEL_MODE->AFT-S range of the AFT-W read wide
 402          //
 403          //============================================================================== 
 404          void CSetSIFFreq(const unsigned char SifFreq, const unsigned char ucAFTMode)
 405          {
 406   1          gmi_CI2CWriteVDCByte(0x0E, 0x08 | ucAFTMode | (SifFreq << 1));
 407   1      }
 408          
 409          //============================================================================== 
 410          // ucTVColorMode:    _TV_NTSC_M,   _TV_NTSC_4_BG, _TV_NTSC_4_DK 
 411          //                   _TV_NTSC_4_I, _TV_PAL_M  --> 60Hz
 412          //                   ------------------------------------------
 413          //                   _TV_PAL_BG,   _TV_PAL_I,     _TV_PAL_DK,
 414          //                   _TV_PAL_N     --> 50Hz PAL
 415          //                   ------------------------------------------
 416          //                   _TV_SECAM_BG, _TV_SECAM_DK,  _TV_SECAM_L
 417          //                   _TV_SECAM_LL  --> 50Hz SECAM
 418          //-------------------------------------------------------------
 419          // ucMode:       _SEARCH_CHANNEL_MODE/_NORMAL_MODE
 420          // PifFreq:      45750/39500/38900/38000/34200/33900 KHz
 421          //CarrierSelect: 0: Split carrier    1: Inter carrier
 422          //============================================================================== 
 423          void gmi_CSetIfMode(const unsigned char ucTVColorMode, const unsigned char ucMode, const unsigned int PifF
             -req, const unsigned char CarrierSelect)
 424          {
 425   1          switch(ucTVColorMode)
C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 8   

 426   1          {
 427   2          default:                // Normal sound
 428   2          case _LIB_TV_NTSC_M    :    // 60Hz NTSC M
 429   2          case _LIB_TV_NTSC_4_BG :    // 60Hz NTSC 4/BG
 430   2          case _LIB_TV_NTSC_4_I  :    // 60Hz NTSC 4/I
 431   2          case _LIB_TV_NTSC_4_DK :    // 60Hz NTSC 4/DK
 432   2          case _LIB_TV_PAL_BG    :    // 50Hz PAL B/G
 433   2          case _LIB_TV_PAL_I     :    // 50Hz PAL I
 434   2          case _LIB_TV_PAL_DK    :    // 50Hz PAL D/K
 435   2          case _LIB_TV_SECAM_L   :    // 50Hz SECAM L
 436   2          case _LIB_TV_SECAM_LL  :    // 50Hz Secam L'
 437   2                      gmi_CI2CWriteVDCByte(0x06, 0x02);  
 438   2              break;
 439   2      
 440   2          case _LIB_TV_PAL_M     :    // 60Hz PAL M
 441   2          case _LIB_TV_PAL_N     :    // 50Hz PAL N
 442   2                      gmi_CI2CWriteVDCByte(0x06, 0x12); 
 443   2              break;
 444   2          } // end switch
 445   1      
 446   1          switch(ucTVColorMode)   // Sound
 447   1          {
 448   2          case _LIB_TV_PAL_M     :    // Sound 4.5M  PAL M
 449   2          case _LIB_TV_NTSC_M    :    // Sound 4.5M  NTSC M
 450   2          case _LIB_TV_PAL_N     :    // Sound 4.5M  PAL N 
 451   2              CSelectPalOrSecamL(0, ucMode, CarrierSelect);  
 452   2              CSetSIFFreq(0x03, ucMode);
 453   2              break;
 454   2      
 455   2          case _LIB_TV_NTSC_4_BG :    // Sound 5.5M  NTSC 4/BG
 456   2          case _LIB_TV_PAL_BG    :    // Sound 5.5M  PAL B/G
 457   2          case _LIB_TV_SECAM_BG  :    // Sound 5.5M  SECAM B/G
 458   2              CSelectPalOrSecamL(0, ucMode, CarrierSelect);
 459   2              CSetSIFFreq(0x00, ucMode);
 460   2              break;
 461   2      
 462   2          default:                // Normal sound
 463   2          case _LIB_TV_NTSC_4_I  :    // Sound 6.0M  NTSC 4/I
 464   2          case _LIB_TV_PAL_I     :    // Sound 6.0M  PAL I
 465   2              CSelectPalOrSecamL(0, ucMode, CarrierSelect);
 466   2              CSetSIFFreq(0x01, ucMode);
 467   2              break;
 468   2      
 469   2          case _LIB_TV_NTSC_4_DK :    // Sound 6.5M  NTSC 4/DK
 470   2          case _LIB_TV_PAL_DK    :    // Sound 6.5M  PAL D/K
 471   2          case _LIB_TV_SECAM_DK  :    // Sound 6.5M  SECAM D/K
 472   2              CSelectPalOrSecamL(0, ucMode, CarrierSelect);
 473   2              CSetSIFFreq(0x02, ucMode);
 474   2              break;
 475   2      
 476   2          case _LIB_TV_SECAM_L   :    // Sound 6.5M  SECAM L
 477   2          case _LIB_TV_SECAM_LL  :    // Sound 6.5M  Secam L'
 478   2              CSelectPalOrSecamL(1, ucMode, CarrierSelect);
 479   2              CSetSIFFreq(0x02, ucMode);
 480   2              break;
 481   2          }
 482   1      
 483   1          CSetPifFreq(ucMode, PifFreq);
 484   1      }
 485          
 486          //----------------------------------------------------------------
 487          void gmi_ChangeInputToVGA(void)
C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 9   

 488          {
 489   1          unsigned char uctemp[3];
 490   1      
 491   1      
 492   1          CI2cRead(_TB1334_VIDEODEVICE, 0x00, 3, uctemp);
 493   1          do
 494   1          {
 495   2              gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();
 496   2              gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();
 497   2              CI2cRead(_TB1334_VIDEODEVICE, 0x00, 3, uctemp);
 498   2          }while((uctemp[0] & 0x80));
 499   1                                
 500   1          for(uctemp[0] = 0x00; uctemp[0] < 0x23; uctemp[0]++)
 501   1          {
 502   2              gmi_CI2CWriteVDCByte(uctemp[0], tInitialVDCdata[uctemp[0]]);
 503   2              gmi_CDelay80Us();
 504   2          }
 505   1                                  
 506   1          gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();
 507   1          gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();gmi_CDelay80Us();
 508   1      
 509   1              gmi_CI2CWriteVDCByte(0x06, 0x06);   
 510   1      }
 511          
 512          //----------------------------------------------------------------
 513          void gmi_CAdjVDCSharpness(unsigned char ucSharpness)
 514          {
 515   1          if (ucSharpness > 63)
 516   1              ucSharpness = 7;
 517   1          gmi_CI2CWriteVDCByte(0x03, ucSharpness);
 518   1      }
 519          
 520          void CNotUseFunc(void)
 521          {
 522   1        //  gmi_CI2CWriteVDCByte(0x00, 0x00);
 523   1        //  gmi_CI2CReadVDCByte(0x00);
 524   1          gmi_CVideoCurrentColor(0);
 525   1        //  gmi_CInitialVDC();
 526   1          gmi_CSelectInputChannel(0x00,0);
 527   1          gmi_CAdjustVDCBrightness(50);
 528   1          gmi_CAdjustVDCContrast(50);
 529   1          gmi_CAdjustVDCSaturation(50);
 530   1          gmi_CAdjustVDCHue(50);
 531   1          gmi_CDelay80Us();
 532   1          gmi_CSetVDCFreeRunMode(_VDC_FREE_RUN_MODE_TO_AUTO);
 533   1          gmi_CSetIfMode(1, 1, 1, 1);
 534   1      #if(_VIDEO_CHIP == _VDC_TW9908C)
                  gmi_CRGBandYUVCtrl(50);
                  gmi_CSetYUVHue(50);   // Set Sub-channel YUV mode Hue 
              #endif
 538   1          gmi_CModeLocked();
 539   1          gmi_ChangeInputToVGA();
 540   1          gmi_CVDCOutputDisable();
 541   1          gmi_CAdjVDCSharpness(0x07);
 542   1      }
 543          
 544          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1085    ----
   CONSTANT SIZE    =     41    ----
C51 COMPILER V8.16   TB1334                                                                04/05/2012 11:15:38 PAGE 10  

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
