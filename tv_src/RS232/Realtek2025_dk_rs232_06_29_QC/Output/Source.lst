C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE SOURCE
OBJECT MODULE PLACED IN .\Output\Source.obj
COMPILER INVOKED BY: D:\安装文件\keil\C51\BIN\C51.EXE Code\Source.c OPTIMIZE(9,SIZE) BROWSE DEFINE(CMOS_CHIP_TYPE=PCB_20
                    -25LV13) PRINT(.\Output\Source.lst) OBJECT(.\Output\Source.obj)

line level    source

   1          //----------------------------------------------------------------------------------------------------
   2          // ID Code      : Source.c No.0004
   3          // Update Note  : 
   4          //
   5          //----------------------------------------------------------------------------------------------------
   6          
   7          #define __SOURCE__
   8          
   9          #include "Header\Include.h"
  10          
  11          
  12          //--------------------------------------------------
  13          // Description  : Scan all input port and select active port
  14          // Input Value  : None
  15          // Output Value : Return _TRUE if the selected input source is exist
  16          //--------------------------------------------------
  17          bit CSourceHandler(void)
  18          {   
  19   1      #if(_AUTO_SCAN_SOURCE)
                  bit bFirstScan = 0;
                  BYTE cnt;
               
                  for(cnt = _GET_INPUT_SOURCE(); ; cnt++)
                  {
                       if (cnt == (_INPUT_PORT_MAX+1))
                       {
                           bFirstScan = 1;
                           cnt        = 0;
                       }
              
                       switch(cnt)
                       {
              #if(_VGA_SUPPORT)      
                       case _SOURCE_VGA:
                           CSourceScanInputPort(CGetSourcePortType(_SOURCE_VGA));
                           break;
              #endif  
              
              #if(_TMDS_SUPPORT)
                       case _SOURCE_DVI:
                           CSourceScanInputPort(CGetSourcePortType(_SOURCE_DVI));
                           break;
              #endif  
              
              #if(_HDMI_SUPPORT)
                       case _SOURCE_HDMI:
                           CSourceScanInputPort(CGetSourcePortType(_SOURCE_HDMI));
                           break;
              #endif  
               
              #if(_YPBPR_SUPPORT)
                       case _SOURCE_YPBPR:
                           CSourceScanInputPort(CGetSourcePortType(_SOURCE_YPBPR));
                           break;
C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 2   

              #endif
                      }
              
                      if (1 == bInputSignalAvailable)
                      {
                          _SET_INPUT_SOURCE(cnt);
              
                          return _TRUE;
                      }
                      else
                      {
                          if (!GET_SOURCE_AUTOCHANGE())
                              return _FALSE;
                               
                          if (1 == bFirstScan && _GET_INPUT_SOURCE() == cnt)
                          {
                              return _FALSE;
                          }
                      }    
                  }
              
              #else
  77   1      
  78   1          CSourceScanInputPort(CGetSourcePortType(_GET_INPUT_SOURCE()));
  79   1      
  80   1          if (0 == bInputSignalAvailable)
  81   1              return _FALSE;
  82   1          
  83   1          return _TRUE;
  84   1      #endif
  85   1      }
  86          
  87          //--------------------------------------------------
  88          // Description  : Return source input port type
  89          // Input Value  : 
  90          // Output Value : 
  91          //--------------------------------------------------
  92          BYTE CGetSourcePortType(BYTE ucSource)
  93          {
  94   1          switch(ucSource)
  95   1          {
  96   2      #if(_VGA_SUPPORT)
  97   2          case _SOURCE_VGA:         return _SOURCE_VGA_PORT_TYPE;
  98   2      #endif
  99   2      
 100   2      #if(_TMDS_SUPPORT)
                  case _SOURCE_DVI:         return _SOURCE_DVI_PORT_TYPE;
              #endif
 103   2      
 104   2      #if(_HDMI_SUPPORT)
                  case _SOURCE_HDMI:        return _SOURCE_HDMI_PORT_TYPE;
              #endif
 107   2              
 108   2      #if(_VIDEO_SUPPORT)
 109   2          case _SOURCE_VIDEO_AV:
 110   2          case _SOURCE_VIDEO_SV:
 111   2          case _SOURCE_VIDEO_YUV:
 112   2          case _SOURCE_VIDEO_DVD:
 113   2          case _SOURCE_VIDEO_TV:    
 114   2          case _SOURCE_VIDEO_SCART: return _SOURCE_VIDEO_PORT_TYPE;
 115   2      #endif
 116   2              
C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 3   

 117   2      #if(_YPBPR_SUPPORT)
                  case _SOURCE_YPBPR:       return _SOURCE_YPBPR_PORT_TYPE;
              #endif
 120   2      
 121   2          default:                  break;
 122   2          }
 123   1      
 124   1          return _NO_PORT;
 125   1      }
 126          
 127          //--------------------------------------------------
 128          // Description  : Check connect pin and scan all input port to obtain if the signal is available
 129          // Input Value  : None
 130          // Output Value : None
 131          //--------------------------------------------------
 132          void CSourceScanInputPort(BYTE ucInputPort)
 133          {
 134   1          switch(ucInputPort)
 135   1          {
 136   2      #if(_YPBPR_SUPPORT == _ON)
                      case _YPBPR_A0_PORT:
              #endif
 139   2              case _DSUB_A0_PORT:
 140   2                  if(CSourceScanInputPortVGA(_ANALOG_SOURCE_0))
 141   2                  {
 142   3                      if((bit)CScalerGetBit(_SYNC_SELECT_47, _BIT4))
 143   3                          bHsyncSelection = 1;
 144   3                      else
 145   3                          bHsyncSelection = 0;
 146   3      
 147   3                      bInputSignalAvailable = 1;
 148   3                              }
 149   2                  else
 150   2                      bInputSignalAvailable = 0;
 151   2      
 152   2                  break;
 153   2      
 154   2      #if(_YPBPR_SUPPORT == _ON)
                      case _YPBPR_A1_PORT:
              #endif
 157   2              case _DSUB_A1_PORT:
 158   2                  if(CSourceScanInputPortVGA(_ANALOG_SOURCE_1))
 159   2                  {
 160   3                      if((bit)CScalerGetBit(_SYNC_SELECT_47, _BIT4))
 161   3                          bHsyncSelection = 1;
 162   3                      else
 163   3                          bHsyncSelection = 0;
 164   3      
 165   3                      bInputSignalAvailable = 1;
 166   3                  }
 167   2                              else
 168   2                      bInputSignalAvailable = 0;
 169   2                  break;
 170   2      
 171   2      #if((_TMDS_SUPPORT == _ON) || (_HDMI_SUPPORT == _ON))
              
                      case _DVI_PORT:
                      case _HDMI_PORT:
                          if(CSourceScanInputPortDVI(_DE_ONLY_OFF))
                              bInputSignalAvailable = 1;
              #if(_DVI_DE_ONLY_SUPPORT == _ON)
                          else if(CSourceScanInputPortDVI(_DE_ONLY_ON))
C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 4   

                              bInputSignalAvailable = 1;
              #endif
                          else
                              bInputSignalAvailable = 0;
                          break;
              
                      case _DVI_I_A0_PORT:
              #if(_DVI_I_SOURCE_SWITCH_SUPPORT == _ON)
                          if(GET_DVI_I_SOURCE_SWITCH())
              #endif
                          {
                              if(CSourceScanInputPortDVI(_DE_ONLY_OFF))
                                  bInputSignalAvailable = 1;
              #if(_DVI_DE_ONLY_SUPPORT == _ON)
                              else if(CSourceScanInputPortDVI(_DE_ONLY_ON))
                                  bInputSignalAvailable = 1;
              #endif
                              else if(CSourceScanInputPortVGA(_ANALOG_SOURCE_0))
                              {
                                  if((bit)CScalerGetBit(_SYNC_SELECT_47, _BIT4))
                                      bHsyncSelection = 1;
                                  else
                                      bHsyncSelection = 0;
              
                                  bInputSignalAvailable = 1;
                              }
                              else
                                  bInputSignalAvailable = 0;
                          }
              #if(_DVI_I_SOURCE_SWITCH_SUPPORT == _ON)
                          else
                          {
                              if(CSourceScanInputPortVGA(_ANALOG_SOURCE_0))
                              {
                                  if((bit)CScalerGetBit(_SYNC_SELECT_47, _BIT4))
                                      bHsyncSelection = 1;
                                  else
                                      bHsyncSelection = 0;
              
                                  bInputSignalAvailable = 1;
                              }
                              else if(CSourceScanInputPortDVI(_DE_ONLY_OFF))
                                  bInputSignalAvailable = 1;
              #if(_DVI_DE_ONLY_SUPPORT == _ON)
                              else if(CSourceScanInputPortDVI(_DE_ONLY_ON))
                                  bInputSignalAvailable = 1;
              #endif
                              else
                                  bInputSignalAvailable = 0;
                          }
              #endif
                          break;
              
                      case _DVI_I_A1_PORT:
              #if(_DVI_I_SOURCE_SWITCH_SUPPORT == _ON)
                          if(GET_DVI_I_SOURCE_SWITCH())
              #endif
                          {
                              if(CSourceScanInputPortDVI(_DE_ONLY_OFF))
                                  bInputSignalAvailable = 1;
              #if(_DVI_DE_ONLY_SUPPORT == _ON)
                              else if(CSourceScanInputPortDVI(_DE_ONLY_ON))
C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 5   

                                  bInputSignalAvailable = 1;
              #endif
                              else if(CSourceScanInputPortVGA(_ANALOG_SOURCE_1))
                              {
                                  if((bit)CScalerGetBit(_SYNC_SELECT_47, _BIT4))
                                      bHsyncSelection = 1;
                                  else
                                      bHsyncSelection = 0;
              
                                  bInputSignalAvailable = 1;
                              }
                              else
                                  bInputSignalAvailable = 0;
                          }
              #if(_DVI_I_SOURCE_SWITCH_SUPPORT == _ON)
                          else
                          {
                              if(CSourceScanInputPortVGA(_ANALOG_SOURCE_1))
                              {
                                  if((bit)CScalerGetBit(_SYNC_SELECT_47, _BIT4))
                                      bHsyncSelection = 1;
                                  else
                                      bHsyncSelection = 0;
              
                                  bInputSignalAvailable = 1;
                              }
                              else if(CSourceScanInputPortDVI(_DE_ONLY_OFF))
                                  bInputSignalAvailable = 1;
              #if(_DVI_DE_ONLY_SUPPORT == _ON)
                              else if(CSourceScanInputPortDVI(_DE_ONLY_ON))
                                  bInputSignalAvailable = 1;
              #endif
                              else
                                  bInputSignalAvailable = 0;
                          }
              #endif
                          break;
              
              #endif
 280   2       //   case _VIDEO_PORT:
 281   2      //   //         CLR_INPUTSIGNAL_AVAILABLE(cnt);
 282   2       //       break;
 283   2          } 
 284   1      }
 285          
 286          //--------------------------------------------------
 287          // Description  : Scan VGA input port to obtain if the signal is available
 288          // Input Value  : Select analog source 0 or 1
 289          // Output Value : Return _TRUE if the signal is available
 290          //--------------------------------------------------
 291          bit CSourceScanInputPortVGA(BYTE ucAnalogSource)
 292          {
 293   1          BYTE cnt, synctypetemp = _NO_SYNC_STATE;
 294   1          
 295   1          CScalerSetBit(_SYNC_SELECT_47, ~_BIT4, 0x00);
 296   1          
 297   1      #if (_SCALER_TYPE == _RTD2547D)
              
                  ucAnalogSource = ucAnalogSource;
              
              #else
 302   1      
C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 6   

 303   1          if(ucAnalogSource == _ANALOG_SOURCE_0)
 304   1          {
 305   2              CScalerSetBit(_SYNC_SELECT_47, ~(_BIT3 | _BIT2), 0x00);
 306   2      #if (_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2546N || _SCALER_TYPE == _RTD2525L)
 307   2                      CScalerSetDataPortBit(_ADC_ACCESS_PORT_DC, 0x00, ~_BIT3, 0x00);
 308   2      #else
                      CScalerSetBit(_ADC_RGB_CTRL_DC, ~_BIT3, 0x00);
              #endif
 311   2          }
 312   1          else if(ucAnalogSource == _ANALOG_SOURCE_1)
 313   1          {
 314   2              CScalerSetBit(_SYNC_SELECT_47, ~(_BIT3 | _BIT2), (_BIT3 | _BIT2));
 315   2      #if (_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2546N || _SCALER_TYPE == _RTD2525L)
 316   2                      CScalerSetDataPortBit(_ADC_ACCESS_PORT_DC, 0x00, ~_BIT3, _BIT3);
 317   2      #else
                      CScalerSetBit(_ADC_RGB_CTRL_DC, ~_BIT3, _BIT3);
              #endif    
 320   2          }
 321   1      #endif  // #if (_SCALER_TYPE == _RTD2547D)  
 322   1          
 323   1          for(cnt=0;cnt<2;cnt++)
 324   1          {
 325   2      #if (_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2546N || _SCALER_TYPE == _RTD2525L || _SCALER_TYPE =
             -= _RTD2547D)
 326   2      
 327   2       #if(_VIDEO_SUPPORT && _VIDEO_CHIP == _VDC_TB1334)
 328   2          if (bSourceVideo())
 329   2              synctypetemp = CSyncGetSyncTypeStepVGA();
 330   2          else
 331   2       #endif // #if(_VIDEO_SUPPORT && _VIDEO_CHIP == _VDC_TB1334)
 332   2          {
 333   3        #if(_HSYNC_TYPE_DETECTION == _NORMAL_RUN)
                      synctypetemp = CSyncGetSyncTypeStepVGA();
                #elif(_HSYNC_TYPE_DETECTION == _AUTO_RUN)
 336   3              synctypetemp = CSyncGetSyncTypeAutoRun();
 337   3        #endif
 338   3          }
 339   2      
 340   2      #else
                      synctypetemp    = CSyncGetSyncTypeStep1VGA();
              #endif
 343   2              
 344   2              if(((synctypetemp == _CS_STATE) || (synctypetemp == _SOY_STATE)) && ((bit)CScalerGetBit(_SYNC_SELE
             -CT_47, _BIT4)))
 345   2              {
 346   3      #if (_SCALER_TYPE != _RTD2553V && _SCALER_TYPE != _RTD2546N && _SCALER_TYPE != _RTD2525L && _SCALER_TYPE !
             -= _RTD2547D)
                          if((bit)CScalerGetBit(_DETECT_HSYNC_PERIOD_LSB_4B, _BIT7))
                              CScalerSetBit(_SYNC_SELECT_47, ~_BIT6, _BIT6);
              #endif
 350   3                  
 351   3                  CScalerSetBit(_SYNC_SELECT_47, ~_BIT0, 0x00);
 352   3                  CAdjustSyncProcessorMeasureStart();
 353   3                  
 354   3                  if(CTimerPollingEventProc(60, CMiscModeMeasurePollingEvent))
 355   3                  {
 356   4                      if(CModeMeasureData())
 357   4                      {
 358   5      #if (_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2546N || _SCALER_TYPE == _RTD2525L || _SCALER_TYPE =
             -= _RTD2547D)
 359   5                          CScalerSetBit(_STABLE_MEASURE_4F, ~_BIT1, _BIT1);
 360   5      #else
C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 7   

                                  CScalerSetBit(_STABLE_COUNT_4F, ~_BIT4, _BIT4);
              #endif
 363   5                          CScalerRead(_STABLE_PERIOD_H_50, 2, pData, _AUTOINC);
 364   5                          ((WORD *)pData)[1] = ((pData[0] & 0x07) << 8) | pData[1];
 365   5                          
 366   5                          if(((stModeInfo.IHSyncPulseCount * 7 / stModeInfo.IHCount) != 0) 
 367   5                              || (stModeInfo.IHSyncPulseCount < 4)
 368   5                              || (abs(stModeInfo.IHCount - ((WORD *)pData)[1]) > 4))
 369   5                          {
 370   6                              return _FALSE;
 371   6                          }
 372   5                      }
 373   4                      else
 374   4                      {
 375   5                          return _FALSE;
 376   5                      }
 377   4                  }
 378   3                  else
 379   3                  {
 380   4                      return _FALSE;
 381   4                  }
 382   3              }
 383   2              
 384   2              if(synctypetemp != _NO_SYNC_STATE)
 385   2              {
 386   3                  return _TRUE;
 387   3              }
 388   2              
 389   2              CScalerSetBit(_SYNC_SELECT_47, ~_BIT4, CScalerGetBit(_SYNC_SELECT_47, _BIT4) ^ _BIT4);
 390   2          }
 391   1          
 392   1          return _FALSE;
 393   1      }
 394          
 395          #if(_TMDS_SUPPORT == _ON || _HDMI_SUPPORT == _ON)
              //--------------------------------------------------
              // Description  : Scan DVI input port to obtain if the signal is available
              // Input Value  : None
              // Output Value : Return _TRUE if the signal is available
              //--------------------------------------------------
              bit CSourceScanInputPortDVI(BYTE ucPar)
              {             
                  BYTE cnt0, cnt1;
              
              #if (_SCALER_TYPE == _RTD2547D)
              
                  CScalerPageSelect(_PAGE2);
              
                  if(ucPar == _DE_ONLY_ON)
                      CScalerSetBit(_P2_POWER_ON_OFF_CTRL_A7, ~_BIT7, _BIT7);
                  else
                      CScalerSetBit(_P2_POWER_ON_OFF_CTRL_A7, ~_BIT7, 0x00);
              
                  CScalerRead(_P2_UP_DOWN_CTRL1_B6, 1, pData, _NON_AUTOINC);
                  pData[0] &= 0xf0;
              
                  if((pData[0] == 0xe0) | (pData[0] == 0x80) | (pData[0] == 0x60) | (pData[0] == 0x10))
                      CScalerSetByte(_P2_RGB_PLL_SETTING_AE, 0x24);
                  else if((pData[0] == 0x40) | (pData[0] == 0x30))
                      CScalerSetByte(_P2_RGB_PLL_SETTING_AE, 0x2b);
                  else
                      CScalerSetByte(_P2_RGB_PLL_SETTING_AE, 0x24);
C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 8   

              
                  CScalerSetBit(_P2_ANALOG_COMMON_CTRL2_AB, ~(_BIT3 | _BIT2), 0x00);
                  CScalerSetBit(_P2_ANALOG_COMMON_CTRL2_AB, ~(_BIT6 | _BIT5 | _BIT4), _BIT6 | _BIT5 | _BIT4);
              
                  for(cnt0=0;cnt0<2;cnt0++)
                  {
                      for(cnt1=0;cnt1<2;cnt1++)
                      {
                          CScalerSetByte(_P2_TMDS_CTRL_A4, 0xf8);
                          CTimerDelayXms(25);
              
                          CScalerRead(_P2_TMDS_CTRL_A4, 1, pData, _NON_AUTOINC);
              
                          if(ucPar == _DE_ONLY_ON)
                              pData[0] = ((pData[0] & 0xe0) == 0xe0) ? _TRUE : _FALSE;
                          else
                              pData[0] = ((pData[0] & 0xf8) == 0xf8) ? _TRUE : _FALSE;
              
                          if(pData[0])
                          {
                              CScalerRead(_P2_UP_DOWN_CTRL1_B6, 1, pData, _NON_AUTOINC);
                              pData[0] &= 0xf0;
              
                              if((pData[0] == 0xe0) || (pData[0] == 0x80) || (pData[0] == 0x60) || (pData[0] == 0x40) ||
             - (pData[0] == 0x30))
                              {
                                  if(CGetSourcePortType(_GET_INPUT_SOURCE()) == _HDMI_PORT)
                                  {
                                      if(!CHdmiFormatDetect())
                                      {
                                          CAdjustDisableHDMIWatchDog(_WD_SET_AVMUTE_ENABLE | _WD_PACKET_VARIATION);
                                          CScalerSetDataPortBit(_P2_HDMI_ADDR_PORT_C9, _P2_HDMI_AVMCR_30, ~_BIT3, _BIT3)
             -;//Enable DVI/HDMI video output
                                      }
              
              #if(_HDMI_SUPPORT == _ON)
                                      if(!CHdmiVideoSetting())
                                      {
                                          return _FALSE;
                                      }
              #elif(_TMDS_SUPPORT == _ON) 
                                      if(CHdmiFormatDetect())
                                          return _FALSE;
                                      else
                                          CScalerSetDataPortBit(_P2_HDMI_ADDR_PORT_C9, _P2_HDMI_AVMCR_30, ~_BIT3, _BIT3)
             -;//Enable DVI/HDMI video output
              #endif
                                  }
                                  else if(CGetSourcePortType(_GET_INPUT_SOURCE()) == _DVI_PORT)
                                  {
                                      if(CHdmiFormatDetect())
                                      {
                                          return _FALSE;
                                      }
                                      else
                                      {
                                          CAdjustDisableHDMIWatchDog(_WD_SET_AVMUTE_ENABLE | _WD_PACKET_VARIATION);
                                          CScalerSetDataPortBit(_P2_HDMI_ADDR_PORT_C9, _P2_HDMI_AVMCR_30, ~_BIT3, _BIT3)
             -;//Enable DVI/HDMI video output
                                      }
                                  }
                                  return _TRUE;
C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 9   

                              }
                          }
              #if(_HDMI_SUPPORT == _ON)
                          if(!CHdmiFormatDetect())
              #endif    
                          CScalerSetBit(_P2_ANALOG_COMMON_CTRL2_AB, ~(_BIT3 | _BIT2), _BIT2);
                      }
              
                      CScalerSetBit(_P2_ANALOG_COMMON_CTRL2_AB, ~(_BIT6 | _BIT5 | _BIT4), _BIT4);
                      CScalerSetBit(_P2_ANALOG_COMMON_CTRL2_AB, ~(_BIT3 | _BIT2), 0x00);
                  }
              
              #else
              
                  if(ucPar == _DE_ONLY_ON)
                      CScalerSetBit(_POWER_ON_OFF_CTRL_C2, ~_BIT7, _BIT7);
                  else
                      CScalerSetBit(_POWER_ON_OFF_CTRL_C2, ~_BIT7, 0x00);
              
                  CScalerRead(_UP_DOWN_CTRL1_D2, 1, pData, _NON_AUTOINC);
                  pData[0] &= 0x0f;
                  
                  if((pData[0] == 0x0e) | (pData[0] == 0x08) | (pData[0] == 0x06) | (pData[0] == 0x01))
                      CScalerSetByte(_RGB_PLL_SETTING_C9, 0x24);
                  else if((pData[0] == 0x04) | (pData[0] == 0x03))
                      CScalerSetByte(_RGB_PLL_SETTING_C9, 0x2b);
                  else
                      CScalerSetByte(_RGB_PLL_SETTING_C9, 0x24);
                  
                  CScalerSetBit(_TMDS_MEAS_RESULT0_BD, ~(_BIT2 | _BIT1), 0x00);
                  CScalerSetBit(_ANALOG_COMMON_CTRL2_C6, 0x9f, 0x70);
                  for(cnt0=0;cnt0<2;cnt0++)
                  {
                      for(cnt1=0;cnt1<2;cnt1++)
                      {
                          CScalerSetByte(_TMDS_CTRL_BF, 0x00);
                          CTimerDelayXms(25);
                          
                          CScalerRead(_TMDS_CTRL_BF, 1, pData, _NON_AUTOINC);
                          if((pData[0] & 0xf8) == 0xf8)
                          {
                              // Force to open DE-Only mode
                              //CScalerSetBit(_POWER_ON_OFF_CTRL_C2, ~_BIT7, _BIT7);
              
                              CScalerRead(_UP_DOWN_CTRL1_D2, 1, pData, _NON_AUTOINC);
                              pData[0] &= 0x0f;
              
                              if((pData[0] == 0x0e) || (pData[0] == 0x08) || (pData[0] == 0x06) || (pData[0] == 0x04) ||
             - (pData[0] == 0x03))
                                  return _TRUE;
                          }
                          
                          CScalerSetBit(_TMDS_MEAS_RESULT0_BD, ~(_BIT2 | _BIT1), _BIT1);
                      }
              
              #if((_TMDS_SUPPORT == _ON) && (_DVI_LONG_CABLE_SUPPORT == _ON))
                      CScalerSetBit(_ANALOG_COMMON_CTRL2_C6, 0x9f, 0x10);
                      CScalerSetBit(_TMDS_MEAS_RESULT0_BD, ~(_BIT2 | _BIT1), 0x00);
              #else
                      break;
              #endif
              
C51 COMPILER V8.16   SOURCE                                                                04/05/2012 11:15:24 PAGE 10  

                  }
              #endif    
              
                  return _FALSE;  
              }
              #endif  // End of #if(_TMDS_SUPPORT == _ON)
 548          
 549          //-----------------------------------------------------------
 550          #if(_VIDEO_SUPPORT && _VIDEO_CHIP == _VDC_TB1334)
 551          // return 1-> Video
 552          bit bSourceVideo(void)
 553          {
 554   1          if (_GET_INPUT_SOURCE() == _SOURCE_VGA  || 
 555   1              _GET_INPUT_SOURCE() == _SOURCE_DVI  || 
 556   1              _GET_INPUT_SOURCE() == _SOURCE_HDMI || 
 557   1              _GET_INPUT_SOURCE() == _SOURCE_YPBPR)
 558   1              return 0;
 559   1      
 560   1          return 1;
 561   1      }
 562          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    417    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
