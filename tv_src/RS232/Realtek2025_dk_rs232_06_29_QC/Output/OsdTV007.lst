C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE OSDTV007
OBJECT MODULE PLACED IN .\Output\OsdTV007.obj
COMPILER INVOKED BY: D:\安装文件\keil\C51\BIN\C51.EXE gmiOSD\OSD007\OsdTV007.c OPTIMIZE(9,SIZE) BROWSE DEFINE(CMOS_CHIP_
                    -TYPE=PCB_2025LV13) PRINT(.\Output\OsdTV007.lst) OBJECT(.\Output\OsdTV007.obj)

line level    source

   1          #define __OSDTV007___
   2          
   3          #include "Header\Include.h"
   4          
   5          #if(_OSD_TYPE == _OSD007)
   6          
   7          #if(_VIDEO_TV_SUPPORT) 
   8          //------------------------------------------------------------
   9          void MTVNoneProc(void)
  10          {
  11   1          switch(ucKeyMessage)
  12   1          {
  13   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
  14   2              case VK_ENTER: 
  15   2      #endif
  16   2              case VK_MENU:        MPublicNoneMenu();             break;
  17   2              case VK_LEFT:        MTVNoneLR(0);                  break;
  18   2              case VK_RIGHT:       MTVNoneLR(1);                  break;
  19   2              
  20   2      #if(_IR_ENABLE)        
  21   2              case VK_IR_MUTE:
  22   2                  SSetMuteState();
  23   2                  ucOsdEventMsg = _SAVE_EE_OSDUSERDATA_MSG;
  24   2                  break;
  25   2      
  26   2      #if(_USE_UD_LR_KEY_MSG && _REMOTE_CONTROLLER != IR_CHUNGHOP_RMH02)
  27   2              case VK_F_LEFT:
  28   2              case VK_F_RIGHT:
  29   2      #endif
  30   2              case VK_IR_VOLDEC:
  31   2              case VK_IR_VOLINC:
  32   2                  GotoAdjustVolume(); 
  33   2                  break;
  34   2                  
  35   2              case VK_IR_DISPLAY:
  36   2                  CDisplayCurrentSourceMessage();
  37   2                //  CShowTVNumber(stVDCColor.CurrentChannel,_SHOW_CH_TV_NUMBER | _SHOW_CH_TV_TYPE | _SHOW_CH_SOU
             -ND_TYPE);
  38   2                  break;
  39   2                      
  40   2      #if(_USE_UD_LR_KEY_MSG && _REMOTE_CONTROLLER != IR_CHUNGHOP_RMH02)
  41   2              case VK_F_DOWN:
  42   2      #endif
  43   2              case VK_IR_CHINC:
  44   2                  CChangeChannel(_NEXT_CHANNEL); // Next channel
  45   2                  ucOsdEventMsg = _SAVE_EE_VEDIOCOLOR_MSG;
  46   2                  break;
  47   2                          
  48   2      #if(_USE_UD_LR_KEY_MSG && _REMOTE_CONTROLLER != IR_CHUNGHOP_RMH02)
  49   2              case VK_F_UP:
  50   2      #endif
  51   2              case VK_IR_CHDEC:
  52   2                  CChangeChannel(_PREV_CHANNEL); // Prev channel
  53   2                  ucOsdEventMsg = _SAVE_EE_VEDIOCOLOR_MSG;
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 2   

  54   2                  break;
  55   2                  
  56   2              case VK_IR_NUM0:
  57   2              case VK_IR_NUM1:
  58   2              case VK_IR_NUM2:
  59   2              case VK_IR_NUM3:
  60   2              case VK_IR_NUM4:
  61   2              case VK_IR_NUM5:
  62   2              case VK_IR_NUM6:
  63   2              case VK_IR_NUM7:
  64   2              case VK_IR_NUM8:
  65   2              case VK_IR_NUM9:
  66   2      
  67   2                  STVInputCHNumber();
  68   2                  break;
  69   2                              
  70   2      #if(_INPUT_NUMBER_MODE==IndirectInputNumber)
  71   2              case VK_IR_INPUTCH: 
  72   2                   STVInputCHEnter();
  73   2                              break;
  74   2      #endif
  75   2              case VK_IR_RETURN:   STVReturnCH();                  break; 
  76   2      #if(_IMAGE_COLOR_MODE)
  77   2              case _IR_IMAGE_KEY_MESSAGE:
  78   2                  CGotoAdjImage();
  79   2                  break;
  80   2      #endif
  81   2      #if(_AUTO_POWER_DOWN)
  82   2              case VK_IR_SLEEP:
  83   2                  CGotoAdjSleep();
  84   2                  break;
  85   2      #endif
  86   2      #endif
  87   2          }
  88   1          
  89   1      }
  90          
  91          //------------------------------------------------------------
  92          void MTVNoneLR(BYTE LR)
  93          {
  94   1      #if(0)
                  if(LR)
                  {
                      CChangeChannel(_PREV_CHANNEL);  // Prev channel
                  }
                  else
                  {
                      CChangeChannel(_NEXT_CHANNEL);  // Next channel
                  }
                  
                  ucOsdEventMsg = _SAVE_EE_VEDIOCOLOR_MSG; 
              #else
 106   1      #if(_KEY_TYPE_OSD007== _5KEY_SUPPORT)
                  if(LR==0)
                  GotoAdjustChanel();
                      else
                  GotoAdjustVolume();
              #else
 112   1              LR=LR;
 113   1          GotoAdjustVolume();
 114   1      #endif
 115   1      #endif
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 3   

 116   1      }  
 117          
 118          //------------------------------------------------------------
 119          
 120          #if(_IR_ENABLE)        
 121          //----------- Shortcut key proc ---------------------------
 122          #define _INPUT_NO_NUMBER       0
 123          #define _INPUT_ONE_NUMBER      1
 124          #define _INPUT_TWO_NUMBER      2
 125          #define _INPUT_THREE_NUMBER    3
 126          #if(_INPUT_NUMBER_MODE==DirectnessInputNumber)
              //---------------------------------------------------------
              void CHANGE_NUMBER_EVENT(void)
              {
                            ucPrevChannel =  stVDCColor.CurrentChannel;
                            stVDCColor.CurrentChannel = (ucCurrentInputNumber > CloadMaxChannelNumber(0)) ? CloadMaxChan
             -nelNumber(0) : ucCurrentInputNumber;
                              _SET_INPUTCH_STATE(0);
                      ucCurrentInputNumber=0;
                             _SET_CHANNEL_FOR_AUDIO(1);
                            ucOsdEventMsg=  _CHANGE_NUMBER_MSG;
              }
              //---------------------------------------------------------------------
              void SDirectnessInputCHNumber(void)
              {
                      BYTE ucInputState = _GET_INPUTCH_STATE() ;
              
                  switch(ucKeyMessage)
                  {
                      // Exit item
              #if(_MENU_FUNC == _MENU_EXIT_ITEM)
                      case VK_ENTER: 
                              _SET_INPUTCH_STATE(0);
                              ucCurrentInputNumber=0;
                              CTimerCancelTimerEvent(CHANGE_NUMBER_EVENT);
                              COsdFxDisableOsd();
                          break;
              #else
                      case VK_MENU:
                              _SET_INPUTCH_STATE(0);
                              ucCurrentInputNumber=0;
                              COsdFxDisableOsd();
                              CTimerCancelTimerEvent(CHANGE_NUMBER_EVENT);
                              MTVNoneProc();
                          break;
              #endif
                      case VK_IR_NUM0:
                      case VK_IR_NUM1:
                      case VK_IR_NUM2:
                      case VK_IR_NUM3:
                      case VK_IR_NUM4:
                      case VK_IR_NUM5:
                      case VK_IR_NUM6:
                      case VK_IR_NUM7:
                      case VK_IR_NUM8:
                      case VK_IR_NUM9:
                              ucInputState = ValueInRangeChange(0, 3, ucInputState, 1, 1);
                              _SET_INPUTCH_STATE(ucInputState);
                      if(_GET_INPUTCH_STATE()==0)
                              {
                              ucInputState = ValueInRangeChange(0, 3, ucInputState, 1, 1);
                              _SET_INPUTCH_STATE(ucInputState);
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 4   

                              ucCurrentInputNumber=0;
                              }
                      if(ucOsdState!= ITEM_SHORTCUT_INPUTCH_NUM)      
                      {
                              ucCurrentInputNumber=(ucKeyMessage & 0x0f)+ucCurrentInputNumber*10;
                              CInitOSDMainFrame();
                              SetOSDDouble(OSD_DOUBLE_WIDTH_ENABLE| OSD_DOUBLE_HEIGHT_ENABLE);   
              
                              OSDPosition(55, 30, _RIGHT_UP_OSD_H_OFFSET, 1, 0x03);
                              OSDClear(0, 4, 0, 53, 0x20, BYTE_COLOR);  // Set message color to red
                              Gotoxy(1,0,BYTE_DISPLAY);  
                              CShowNumber(ucCurrentInputNumber, 0);
                              CTimerReactiveTimerEvent(SEC(2), CHANGE_NUMBER_EVENT);
                              COsdFxEnableOsd();         
              #if(_AUTO_POWER_DOWN)
                              bTimerOnScreen = 0;
              #endif
                              _SET_INPUTCH_STATE(1);
                              ucOsdState     = ITEM_SHORTCUT_INPUTCH_NUM;
                      }
                      else if(ucOsdState== ITEM_SHORTCUT_INPUTCH_NUM)
                      {
                      if(ucCurrentInputNumber==0&&(ucKeyMessage & 0x0f)==0)
                              _SET_INPUTCH_STATE(0);
                      if(ucCurrentInputNumber==0&&(ucKeyMessage & 0x0f)!=0)
                              _SET_INPUTCH_STATE(1);
                              
                           ucCurrentInputNumber=(ucKeyMessage & 0x0f)+ucCurrentInputNumber*10;
                            OSDClear(0, 2, 1, 10 , 0x00, BYTE_DISPLAY);
                              Gotoxy(1,0,BYTE_DISPLAY);         
                              CShowNumber(ucCurrentInputNumber, 0);
              
                              CTimerCancelTimerEvent(CHANGE_NUMBER_EVENT);
                              CTimerReactiveTimerEvent(SEC(2), CHANGE_NUMBER_EVENT);
                      }
                      break;
                      default:
                          COthterKeyAction();
                              break;
                  }  
              
              }
              #endif
 220          #if(_INPUT_NUMBER_MODE==IndirectInputNumber)
 221          void STVInputCHEnter(void)
 222          {
 223   1          BYTE ucInputState = _GET_INPUTCH_STATE() + 1;
 224   1          
 225   1          iInputCHCount = _INPUT_CH_TIMEOUT_COUNT;
 226   1          // Reset input number and state
 227   1          ucCurrentInputNumber = 0;
 228   1          ucCurrentInputState  = _INPUT_NO_NUMBER;  // 0: no input number   1: input one number     2: input two
             - number    3: input three number
 229   1          
 230   1          if (ucInputState > 3)
 231   1          {   // Input state err reset input state to input one channel -
 232   2              ucInputState = 1;
 233   2              _SET_INPUTCH_STATE(0);
 234   2              CEepromSaveOsdUserData();
 235   2          }
 236   1          
 237   1          COsdFxDisableOsd();
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 5   

 238   1          SetOSDRamAddress(ROW_COUNT,COL_WIDTH,FONT_BASE_ADDRESS);
 239   1          SetOSDDouble(OSD_DOUBLE_HEIGHT_ENABLE | OSD_DOUBLE_WIDTH_ENABLE);
 240   1          SetRowCmds(ROW_COUNT,COL_WIDTH);
 241   1          COsdFxCodeWrite(ucCloseAllWindow);
 242   1          CClearWindow(0x20);
 243   1      
 244   1      
 245   1          // if (_GET_OSD_SIZE()) 
 246   1         //     OSDPosition(_OSD_DOUBLE_WIDTH(55), _OSD_DOUBLE_HEIGHT(30), _RIGHT_UP_OSD_H_OFFSET, 1, 0x03);
 247   1         //   else
 248   1             OSDPosition(55, 30, _RIGHT_UP_OSD_H_OFFSET, 1, 0x03);
 249   1      
 250   1      //    OSDPosition(30,30,38,1,0x01);
 251   1          
 252   1          Gotoxy(1, 0, BYTE_DISPLAY);         
 253   1          for(;ucInputState > 0;ucInputState--)
 254   1              OutputChar(0x2d);  // Show "-"
 255   1          
 256   1          COsdFxEnableOsd();
 257   1          CTimerReactiveTimerEvent(SEC(stOsdUserData.OsdTimeout),COsdDispOsdTimerEvent);
 258   1          ucOsdState = ITEM_SHORTCUT_INPUTCH_NUM;
 259   1      }
 260          //---------------------------------------------------------
 261          void SInputCHNumber(void)
 262          {
 263   1          BYTE ucInputState = _GET_INPUTCH_STATE() + 1;
 264   1          
 265   1          if (iInputCHCount > 0)
 266   1              iInputCHCount--;
 267   1      
 268   1          switch(ucKeyMessage)
 269   1          {
 270   2              // Exit item
 271   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
 272   2              case VK_ENTER: 
 273   2          //    case VK_AUTO:
 274   2                  COsdFxDisableOsd();
 275   2                  break;
 276   2      #else
                      case VK_MENU:
                          COsdFxDisableOsd();
                          MTVNoneProc();
                          break;
              #endif
 282   2              case VK_IR_NUM0:
 283   2              case VK_IR_NUM1:
 284   2              case VK_IR_NUM2:
 285   2              case VK_IR_NUM3:
 286   2              case VK_IR_NUM4:
 287   2              case VK_IR_NUM5:
 288   2              case VK_IR_NUM6:
 289   2              case VK_IR_NUM7:
 290   2              case VK_IR_NUM8:
 291   2              case VK_IR_NUM9:
 292   2                  iInputCHCount = _INPUT_CH_TIMEOUT_COUNT;
 293   2                  SInceptNumber(ucKeyMessage & 0x0f);
 294   2                  break;
 295   2                  
 296   2              case VK_IR_INPUTCH:
 297   2                  iInputCHCount = _INPUT_CH_TIMEOUT_COUNT;
 298   2                  ucInputState = ValueInRangeChange(1, 3, ucInputState, 1, 1);
 299   2                  _SET_INPUTCH_STATE(ucInputState-1);
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 6   

 300   2                  CEepromSaveOsdUserData();
 301   2                  
 302   2                  // Reset input number and state
 303   2                  ucCurrentInputNumber = 0;
 304   2                  ucCurrentInputState  = 0;  // 0: no input number   1: input one number     2: input two number
             -    3: input three number
 305   2                  break;
 306   2                  
 307   2              default:
 308   2                  COthterKeyAction();
 309   2                  
 310   2                  if (ucOsdState != ITEM_SHORTCUT_INPUTCH_NUM)
 311   2                      return;
 312   2                  else           
 313   2                      break;
 314   2          }  
 315   1          
 316   1          SShowCurrentInputState(ucInputState);
 317   1          
 318   1          if (ucInputState == ucCurrentInputState || iInputCHCount == 0)
 319   1          {
 320   2              BYTE ucMaxChannel = CloadMaxChannelNumber(1);
 321   2              BYTE ucTemp=CLoadChannelColorType(stVDCColor.CurrentChannel);
 322   2              
 323   2              iInputCHCount = _INPUT_CH_TIMEOUT_COUNT;
 324   2              if (ucCurrentInputState == 0)
 325   2              {
 326   3                  COsdFxDisableOsd();
 327   3                  return;
 328   3              }
 329   2      
 330   2              MUTE_ON();
 331   2            //  CForceBackGroundToBlack();
 332   2              ucOsdState = _MENU_NONE;
 333   2              CModeResetTVMode();
 334   2              CTimerDelayXms(200);
 335   2              
 336   2              ucPrevChannel =  stVDCColor.CurrentChannel;
 337   2                if(ucCurrentInputNumber>=CloadMinChannelNumber())     
 338   2                      stVDCColor.CurrentChannel = (ucCurrentInputNumber > ucMaxChannel) ? ucMaxChannel : ucCurrentInput
             -Number;
 339   2              else
 340   2                      stVDCColor.CurrentChannel = CloadMinChannelNumber();
 341   2              CSetTVChannel(stVDCColor.CurrentChannel);
 342   2              CShowTVNumber(stVDCColor.CurrentChannel,_SHOW_CH_TV_NUMBER | _SHOW_CH_TV_TYPE | _SHOW_CH_SOUND_TYP
             -E);
 343   2              gmi_CI2CWrite9886(ucTVType, _TUNER_MUTE_OFF, _NORMAL_MODE);
 344   2              bChangeChannel = 1;
 345   2                      
 346   2               CModeResetTVNtscToPal();
 347   2              ucOsdEventMsg = _SAVE_EE_VEDIOCOLOR_MSG;
 348   2               _SET_CHANNEL_FOR_AUDIO(1);
 349   2          }
 350   1      }
 351          
 352          //---------------------------------------------------------
 353          void SInceptNumber(const WORD ucNumber)
 354          {
 355   1          switch(ucCurrentInputState)
 356   1          { 
 357   2              case _INPUT_NO_NUMBER: // not input number
 358   2                  ucCurrentInputNumber = ucNumber;
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 7   

 359   2                  ucCurrentInputState  = _INPUT_ONE_NUMBER;
 360   2                  break;
 361   2                  
 362   2              case _INPUT_ONE_NUMBER: // Input on number alrady
 363   2              case _INPUT_TWO_NUMBER: // Input two number alrady
 364   2                  ucCurrentInputNumber = (ucCurrentInputNumber*10) + ucNumber;
 365   2                  ucCurrentInputState  = (ucCurrentInputState == _INPUT_TWO_NUMBER) ? _INPUT_THREE_NUMBER : _INP
             -UT_TWO_NUMBER;
 366   2                  break;
 367   2                  /*
 368   2                  case _INPUT_TWO_NUMBER: // Input two number alrady
 369   2                  ucCurrentInputNumber = (ucCurrentInputNumber*10) + ucNumber;
 370   2                  ucCurrentInputState  = _INPUT_THREE_NUMBER;
 371   2                  break;*/
 372   2          }
 373   1      }
 374          
 375          //---------------------------------------------------------
 376          void SShowCurrentInputState(WORD ucInputState)
 377          {
 378   1          Gotoxy(1, 0, BYTE_DISPLAY); 
 379   1          
 380   1          switch(ucCurrentInputState)
 381   1          {
 382   2              case _INPUT_NO_NUMBER: // not input number
 383   2                  for(;ucInputState > 0;ucInputState--)
 384   2                      OutputChar(0x2d);  // Show "-"
 385   2                  OutputChar(0x00);  // Show " "
 386   2                  OutputChar(0x00);  // Show " "
 387   2                  break;
 388   2                  
 389   2              case _INPUT_ONE_NUMBER: // Input on number alrady
 390   2                  CShowNumber(ucCurrentInputNumber,1);
 391   2                  break;
 392   2                  
 393   2              case _INPUT_TWO_NUMBER: // Input two number alrady
 394   2                  CShowNumber(ucCurrentInputNumber,2);
 395   2                  break;
 396   2                  
 397   2              case _INPUT_THREE_NUMBER: // Input three number alrady
 398   2                  CShowNumber(ucCurrentInputNumber,3);
 399   2                  break;
 400   2          }
 401   1      }
 402          #endif
 403          //---------------------------------------------------------
 404          void STVInputCHNumber(void)
 405          {
 406   1      #if(_INPUT_NUMBER_MODE==IndirectInputNumber)                    
 407   1                       STVInputCHEnter();
 408   1                       ucOsdState = ITEM_SHORTCUT_INPUTCH_NUM;
 409   1                      SInputCHNumber();
 410   1      #endif
 411   1           
 412   1      #if(_INPUT_NUMBER_MODE==DirectnessInputNumber)
                      SDirectnessInputCHNumber();
              #endif  
 415   1      }
 416          
 417          //---------------------------------------------------------
 418          void STVReturnCH(void)
 419          {
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 8   

 420   1          pData[0]                  = stVDCColor.CurrentChannel;
 421   1          stVDCColor.CurrentChannel = ucPrevChannel;
 422   1          ucPrevChannel             = pData[0];
 423   1          
 424   1          MUTE_ON();
 425   1          CModeResetTVMode();
 426   1          CSetTVChannel(stVDCColor.CurrentChannel);
 427   1          CShowTVNumber(stVDCColor.CurrentChannel, _SHOW_CH_TV_NUMBER | _SHOW_CH_TV_TYPE | _SHOW_CH_SOUND_TYPE);
 428   1          ucOsdEventMsg = _SAVE_EE_VEDIOCOLOR_MSG;
 429   1          bChangeChannel = 1;
 430   1      }
 431          #endif
 432          
 433          //------------------------------------------------------------
 434          void CDrawTVFunction(void)
 435          {   BYTE uctemp=4;
 436   1      
 437   1          CLeftAlignTextout((BYTE *)sAutoSearch[GET_LANGUAGE], 1, uctemp++);       // "Auto Search"
 438   1      #if(_NTSC_SEARCH_TABLE)
                  CLeftAlignTextout((BYTE *)sCATVAIR[GET_LANGUAGE], 1, uctemp++);         // "TV System"
              
              #else
 442   1          CLeftAlignTextout((BYTE *)sManualSearch[GET_LANGUAGE], 1, uctemp++);     // "Manual Search"
 443   1       #endif
 444   1         CLeftAlignTextout((BYTE *)sTuning[GET_LANGUAGE], 1, uctemp++);           // "Tuning"
 445   1          CLeftAlignTextout((BYTE *)sChannel[GET_LANGUAGE], 1, uctemp++);          // "Channel"
 446   1          CLeftAlignTextout((BYTE *)sTVSystem[GET_LANGUAGE], 1, uctemp++);         // "TV System"
 447   1      #if(!_NTSC_SEARCH_TABLE)
 448   1          CLeftAlignTextout((BYTE *)sSwap[GET_LANGUAGE], 1, uctemp++);             // "Swap"
 449   1      #endif
 450   1          CLeftAlignTextout((BYTE *)sSkip[GET_LANGUAGE], 1, uctemp++);            // "Skip"
 451   1          CLeftAlignTextout((BYTE *)sExit[GET_LANGUAGE], 1, uctemp++);            // "Exit"
 452   1      }
 453          
 454          //----------------------------------------------------------------------------------------------------
 455          //   TV function Sub item
 456          void MTVFuncSubItemProc(void)
 457          {
 458   1          switch(ucKeyMessage)
 459   1          {
 460   2              // Select item
 461   2      #if(_USE_UD_LR_KEY_MSG)
 462   2              case VK_F_LEFT:
 463   2              case VK_F_RIGHT:
 464   2      #endif
 465   2      #if(_KEY_TYPE_OSD007==_7KEY_SUPPORT)
 466   2              case VK_RIGHT:        
 467   2              case VK_LEFT:     
 468   2      #else
                      case VK_MENU:    
              #endif
 471   2              case VK_IR_OK:    
 472   2                              MTVFuncSubItemMenu();                break;
 473   2      
 474   2              // Move item
 475   2      #if(_USE_UD_LR_KEY_MSG)
 476   2              case VK_F_UP:
 477   2      #endif
 478   2      #if(_KEY_TYPE_OSD007!=_7KEY_SUPPORT)
                      case VK_RIGHT:       
              #endif
 481   2                              MTVFuncSubItemLR(1);                 break;
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 9   

 482   2      
 483   2              // Move item
 484   2      #if(_USE_UD_LR_KEY_MSG)
 485   2              case VK_F_DOWN:
 486   2      #endif
 487   2      #if(_KEY_TYPE_OSD007!=_7KEY_SUPPORT)
                      case VK_LEFT:    
              #endif
 490   2                              MTVFuncSubItemLR(0);                 break;
 491   2      
 492   2              // Exit item
 493   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
 494   2              case VK_ENTER:      
 495   2      #endif
 496   2      #if(_KEY_TYPE_OSD007==_7KEY_SUPPORT)
 497   2              case VK_MENU:    
 498   2      #endif
 499   2             case VK_AUTO:
 500   2             case VK_IR_EXIT:
 501   2                   CExitToMainItem(MENU_MAIN_TV_FUNC);  break;
 502   2              // Other key
 503   2              default:             COthterKeyAction();                  break;
 504   2          }
 505   1      }
 506          
 507          //----------------------------------------------------------------------------------------------------
 508          #if(_TV_SEARCH_SHOW_TYPE == _TV_SEARCH_SHOW_FREQ)
 509          void CShowFreq(WORD iFreqN)
 510          {
 511   1          DWORD lFreqTemp = 0;
 512   1      
 513   1          // Get PIF freq
 514   1          lFreqTemp = (((float)iFreqN/_TUNER_BP) - ((float)_PIF_FREQ/1000))*100;
 515   1      
 516   1          Gotoxy(10, _MESSAGE_V_POSITION, BYTE_DISPLAY); 
 517   1          iFreqN = lFreqTemp/100;  // MHz  
 518   1          CShowNumber(iFreqN, 0);
 519   1          OutputChar(0x2E); // "."
 520   1      
 521   1          iFreqN = lFreqTemp%100;  // KHz
 522   1          CShowNumber(iFreqN, 2);
 523   1      
 524   1          OutputChar('M');
 525   1          OutputChar('H');
 526   1          OutputChar('z');
 527   1          OutputChar(0x00); // " "
 528   1      }
 529          
 530          void CShowCurrentChannelFreq(void)
 531          {
 532   1          WORD iFreq = 0;
 533   1      
 534   1          iFreq = CLoadChannelFreq(stVDCColor.CurrentChannel);
 535   1          CShowFreq(iFreq);
 536   1      }
 537          #endif
 538          
 539          //----------------------------------------------------------------------------------------------------
 540          void MTVFuncSubItemMenu(void)
 541          {
 542   1          CClearMsg(_CLEAR_AND_SELECT_SUB_ITEM);
 543   1      
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 10  

 544   1          Gotoxy(14, _MESSAGE_V_POSITION, BYTE_DISPLAY);
 545   1      
 546   1          switch(ucOsdState)
 547   1          {
 548   2              case MENU_AUTO_SEARCH:
 549   2      #if(_NTSC_SEARCH_TABLE)                         
                      CTvAutoSearchCATVA_AIR();
              #else                   
 552   2               CTvAutoSearch();
 553   2      #endif
 554   2               COsdDispOsdTimerEvent();
 555   2               //   CClearMsg(_CLEAR_AND_EXIT_SUB_ITEM);
 556   2                  break;
 557   2      
 558   2              case MENU_MANUAL_SEARCH:       
 559   2      #if(_NTSC_SEARCH_TABLE)
                    CenterTextout((BYTE *)sTVType[ucTVType], 10, _MESSAGE_V_POSITION);
                     CenterTextout((BYTE *)sCATV_AIR[_GET_CATV_AIR()], 18, _MESSAGE_V_POSITION);
              #else
 563   2                  CShowCurrentChannelFreq();
 564   2      #endif
 565   2                  ucOsdState = MENU_MANUAL_SEARCH_ADJ;   
 566   2                  break;
 567   2      
 568   2              case MENU_TUNING:
 569   2      #if(_TV_SEARCH_SHOW_TYPE == _TV_SEARCH_SHOW_FREQ)
 570   2                  CShowCurrentChannelFreq();
 571   2      #endif
 572   2                  ucOsdState = MENU_TUNING_ADJ;        
 573   2                  break;
 574   2      
 575   2              case MENU_CHANNEL:     
 576   2          Gotoxy(10,_MESSAGE_V_POSITION,BYTE_DISPLAY);
 577   2          CShowNumber(stVDCColor.CurrentChannel, 0);
 578   2          CenterTextout((BYTE *)sTVType[ucTVType], 18, _MESSAGE_V_POSITION);
 579   2                  ucOsdState = MENU_CHANNEL_ADJ;        
 580   2                  break;
 581   2      
 582   2              case MENU_TV_SYSTEM: 
 583   2      #if(_NTSC_SEARCH_TABLE)
                    CenterTextout((BYTE *)sTVType[ucTVType], 10, _MESSAGE_V_POSITION);
                     CenterTextout((BYTE *)sCATV_AIR[_GET_CATV_AIR()], 18, _MESSAGE_V_POSITION);
              #else
 587   2                  CenterTextout((BYTE *)sTVType[ucTVType], 14, _MESSAGE_V_POSITION);
 588   2      #endif
 589   2                    ucOSDAdjTemp = ucTVType;
 590   2                      ucOsdState   = MENU_TV_SYSTEM_ADJ; 
 591   2                  break;
 592   2      
 593   2                  /*
 594   2              case MENU_SOUND_SYSTEM:  // Not use
 595   2                  break;
 596   2                           */
 597   2              case MENU_SWAP:     
 598   2                  CShowNumber(stVDCColor.CurrentChannel, 0);
 599   2                  ucPrevChannel = stVDCColor.CurrentChannel;
 600   2                  ucOsdState = MENU_SWAP_ADJ;        
 601   2                  break;
 602   2      
 603   2              case MENU_SKIP: 
 604   2                  ucOsdState = CLoadChannelSkip(stVDCColor.CurrentChannel);
 605   2                  CenterTextout((BYTE *)sOn_Off[ucOsdState][GET_LANGUAGE],15,_MESSAGE_V_POSITION);
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 11  

 606   2                  ucOsdState = MENU_SKIP_ADJ;        
 607   2                  break;
 608   2      
 609   2              case MENU_SUB_TV_FUNC_CLOSE: 
 610   2                  CExitToMainItem(MENU_MAIN_TV_FUNC); 
 611   2                  break;
 612   2          }        
 613   1      }
 614          
 615          //----------------------------------------------------------------------------------------------------
 616          void MTVFuncSubItemLR(BYTE LR)
 617          {
 618   1         BYTE  uctemp;
 619   1          ucOsdState = ValueInRangeChange(MENU_AUTO_SEARCH, MENU_SUB_TV_FUNC_CLOSE, ucOsdState, LR, 1);
 620   1              
 621   1      #if(_NTSC_SEARCH_TABLE)
                  if(ucOsdState==MENU_SWAP)
                  ucOsdState = ValueInRangeChange(MENU_AUTO_SEARCH, MENU_SUB_TV_FUNC_CLOSE, ucOsdState, LR, 1);
                   if(ucOsdState>=MENU_SWAP)          
                      uctemp=ucOsdState - MENU_AUTO_SEARCH-1;
                   else
              #endif
 628   1              uctemp=ucOsdState - MENU_AUTO_SEARCH;
 629   1          CGotoNextSubItem(uctemp);
 630   1      }
 631          
 632          
 633          
 634          //--------- TVSystem adjust proc ----------------------------------
 635          void MTVSystemAdjProc(void)
 636          {
 637   1          switch(ucKeyMessage)
 638   1          {
 639   2              // Move item
 640   2      #if(_USE_UD_LR_KEY_MSG)
 641   2              case VK_F_UP:
 642   2              case VK_F_DOWN:
 643   2                  MTVSystemAdjMenu();
 644   2                  COsdProc();
 645   2                  break;
 646   2      #endif
 647   2      
 648   2              // Exit item
 649   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
 650   2              case VK_ENTER: 
 651   2      #endif
 652   2              case VK_AUTO:
 653   2              case VK_IR_EXIT:
 654   2              case VK_MENU:        MTVSystemAdjMenu();       break;
 655   2      
 656   2              // Adjust
 657   2      #if(_USE_UD_LR_KEY_MSG)
 658   2              case VK_F_LEFT:
 659   2      #endif
 660   2              case VK_LEFT:        MTVSystemAdjLR(1);        break;
 661   2      
 662   2              // Adjust
 663   2      #if(_USE_UD_LR_KEY_MSG)
 664   2              case VK_F_RIGHT:
 665   2      #endif
 666   2              case VK_RIGHT:       MTVSystemAdjLR(0);        break;
 667   2      
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 12  

 668   2              // Other key
 669   2              default:             COthterKeyAction();       break;
 670   2          }
 671   1      }
 672          
 673          //----------------------------------------------------------------------------------------------------
 674          void MTVSystemAdjMenu(void)
 675          {
 676   1          ucOsdState = MENU_TV_SYSTEM;
 677   1          CClearMsg(_CLEAR_AND_EXIT_SUB_ITEM);
 678   1      }
 679          //----------------------------------------------------------------------------------------------------
 680          bit BSearchedTVType(BYTE ucTvType)
 681          {
 682   1      #if(_NTSC_SEARCH_TABLE)
                  switch(ucTvType) 
                  {
                      case _TV_NTSC_M    :    
                          return 1;
                          break;
                      
                      case _TV_PAL_M :    
                          return 1;
                          break;
                      
                      case _TV_PAL_N :    
                          return 1;
                          break;
                      }
              #else
 698   1      
 699   1          switch(ucTvType) 
 700   1          {
 701   2              case _TV_NTSC_M    :    // 60Hz Sound 4.5M  NTSC M
 702   2      #if(_TV_NTSC_M_SUPPORT)
                          return 1;
              #endif
 705   2                  break;
 706   2              
 707   2              case _TV_NTSC_4_BG :    // 60Hz Sound 5.5M  NTSC 4/BG 
 708   2      #if(_TV_NTSC_4_BG_SUPPORT)
                          return 1;
              #endif 
 711   2                  break;
 712   2              
 713   2              case _TV_NTSC_4_DK :    // 60Hz Sound 6.5M  NTSC 4/DK 
 714   2      #if(_TV_NTSC_4_DK_SUPPORT)
                          return 1;
              #endif
 717   2                  break;
 718   2              
 719   2              case _TV_NTSC_4_I  :    // 60Hz Sound 6.0M  NTSC 4/I
 720   2      #if(_TV_NTSC_4_I_SUPPORT)
                          return 1;
              #endif
 723   2                  break;
 724   2              
 725   2              case _TV_PAL_M     :    // 60Hz Sound 4.5M  PAL M  
 726   2      #if(_TV_PAL_M_SUPPORT)
                          return 1;
              #endif
 729   2                  break;
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 13  

 730   2              
 731   2              case _TV_PAL_BG    :    // 50Hz Sound 5.5M  PAL B/G
 732   2      #if(_TV_PAL_BG_SUPPORT)
 733   2                  return 1;
 734   2      #endif
 735   2                  break;
 736   2              
 737   2              case _TV_PAL_I     :    // 50Hz Sound 6.0M  PAL I
 738   2      #if(_TV_PAL_I_SUPPORT)
 739   2                  return 1;
 740   2      #endif
 741   2                  break;
 742   2              
 743   2              case _TV_PAL_DK    :    // 50Hz Sound 6.5M  PAL D/K
 744   2      #if(_TV_PAL_DK_SUPPORT)
 745   2                  return 1;
 746   2      #endif
 747   2                  break;
 748   2              
 749   2              case _TV_PAL_N     :    // 50Hz Sound 4.5M  PAL N 
 750   2      #if(_TV_PAL_N_SUPPORT)
                          return 1;
              #endif
 753   2                  break;
 754   2              
 755   2              case _TV_SECAM_BG  :    // 50Hz Sound 5.5M  SECAM B/G
 756   2      #if(_TV_SECAM_BG_SUPPORT)
 757   2                  return 1;
 758   2      #endif
 759   2                  break;
 760   2              
 761   2              case _TV_SECAM_DK  :    // 50Hz Sound 6.5M  SECAM D/K
 762   2      #if(_TV_SECAM_DK_SUPPORT)
 763   2                  return 1;
 764   2      #endif
 765   2                  break;
 766   2              
 767   2              case _TV_SECAM_L   :    // 50Hz Sound 6.5M  SECAM L  
 768   2      #if(_TV_SECAM_L_SUPPORT)
                          return 1;
              #endif
 771   2                  break;
 772   2              
 773   2              case _TV_SECAM_LL  :    // 50Hz Sound 6.5M  Secam L' 
 774   2      #if(_TV_SECAM_LL_SUPPORT)
                          return 1;
              #endif
 777   2                  break;
 778   2          } // end switch 
 779   1      #endif    
 780   1          return 0;
 781   1      }
 782          
 783          //----------------------------------------------------------------------------------------------------
 784          void MTVSystemAdjLR(BYTE LR)
 785          {
 786   1          for(pData[15] = 0; pData[15] < (_MAX_TV_TYPE + 1); pData[15]++)
 787   1          {
 788   2              ucTVType = ValueInRangeChange(0, _MAX_TV_TYPE, ucTVType, LR, 1);
 789   2              
 790   2              if (BSearchedTVType(ucTVType))
 791   2                  break;
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 14  

 792   2          }
 793   1          
 794   1          CClearMsg(_CLEAR_MSG_ONLY);
 795   1      #if(_NTSC_SEARCH_TABLE)
                    CenterTextout((BYTE *)sTVType[ucTVType], 10, _MESSAGE_V_POSITION);
                     CenterTextout((BYTE *)sCATV_AIR[_GET_CATV_AIR()], 18, _MESSAGE_V_POSITION);
              #else
 799   1          CenterTextout((BYTE *)sTVType[ucTVType], 14, _MESSAGE_V_POSITION);
 800   1      #endif
 801   1          
 802   1          // Save adjust result        
 803   1          CSaveChannelColorType(stVDCColor.CurrentChannel, ucTVType);
 804   1          
 805   1          gmi_CI2CWrite9886(ucTVType, _TUNER_MUTE_OFF, _NORMAL_MODE); // set 9886
 806   1      }
 807          
 808          /*
 809          //--------- Sound System ADJUST PROC ----------------------------------
 810          void MSoundSystemAdjProc(void)
 811          {
 812              switch(ucKeyMessage)
 813              {
 814              case VK_MENU:        MSoundSystemAdjMenu();       break;
 815              case VK_LEFT:        MSoundSystemAdjLR(1);        break;
 816              case VK_RIGHT:       MSoundSystemAdjLR(0);        break;
 817              case VK_ENTER:       MSoundSystemAdjEnter();      break;
 818                  
 819              default:             COthterKeyAction();          break;
 820              }
 821          }
 822          
 823          //----------------------------------------------------------------------------------------------------
 824          void MSoundSystemAdjMenu(void)
 825          {
 826              ucOsdState = MENU_SOUND_SYSTEM;
 827              CClearMsg(_CLEAR_AND_EXIT_SUB_ITEM);
 828          }
 829          
 830          //----------------------------------------------------------------------------------------------------
 831          void MSoundSystemAdjLR(BYTE LR)
 832          {
 833              BYTE ucSoundType = CLoadChannelSoundType(stVDCColor.CurrentChannel);
 834              
 835              ucSoundType = ValueInRangeChange(0, 3, ucSoundType, LR, 1);
 836              
 837              Gotoxy(14, _MESSAGE_V_POSITION, BYTE_DISPLAY);
 838              Textout((BYTE *)sTVSoundType[ucSoundType]);
 839              
 840              // Save adjust result
 841              CSaveChannelSoundType(stVDCColor.CurrentChannel, ucSoundType);
 842              
 843              //    gmi_CWrite9886(ucSoundType); // set 9886
 844          }
 845          
 846          //----------------------------------------------------------------------------------------------------
 847          void MSoundSystemAdjEnter(void)
 848          {
 849          }
 850          //----------------------------------------------------------------------------------------------------
 851            */
 852          
 853          
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 15  

 854          //--------- Auto Search PROC ----------------------------------
 855          void MAutoSearchAdjProc(void)
 856          {
 857   1          switch(ucKeyMessage)
 858   1          {
 859   2              // Move item
 860   2      #if(_USE_UD_LR_KEY_MSG)
 861   2              case VK_F_UP:
 862   2              case VK_F_DOWN:
 863   2                  MAutoSearchAdjMenu();
 864   2                  COsdProc();
 865   2                  break;
 866   2      #endif
 867   2      
 868   2              // Exit item
 869   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
 870   2              case VK_ENTER: 
 871   2      #endif
 872   2              case VK_AUTO:
 873   2              case VK_IR_EXIT:
 874   2              case VK_MENU:        MAutoSearchAdjMenu();       break;
 875   2      
 876   2              // Adjust
 877   2      #if(_USE_UD_LR_KEY_MSG)
 878   2              case VK_F_LEFT:
 879   2      #endif
 880   2              case VK_LEFT:        MAutoSearchAdjLR(1);        break;
 881   2      
 882   2              // Adjust
 883   2      #if(_USE_UD_LR_KEY_MSG)
 884   2              case VK_F_RIGHT:
 885   2      #endif
 886   2              case VK_RIGHT:       MAutoSearchAdjLR(0);        break;
 887   2      
 888   2              // Other key
 889   2              default:             COthterKeyAction();         break;
 890   2          }
 891   1      }
 892          
 893          //----------------------------------------------------------------------------------------------------
 894          void MAutoSearchAdjMenu(void)
 895          {
 896   1          ucOsdState = MENU_AUTO_SEARCH;
 897   1          CClearMsg(_CLEAR_AND_EXIT_SUB_ITEM);
 898   1      }
 899          
 900          //----------------------------------------------------------------------------------------------------
 901          void MAutoSearchAdjLR(BYTE LR)
 902          {
 903   1          LR = 0;
 904   1      }
 905          
 906          //----------------------------------------------------------------------------------------------------
 907          #if(_TV_SEARCH_SHOW_TYPE == _TV_SEARCH_SHOW_SLIDER)
              void CShowAutoSearchSliderInOSD(BYTE ucCurrentValue)
              {
                  SLIDER1(ucCurrentValue);
              }
              #endif
 913          
 914          #if(_TV_SEARCH_SHOW_TYPE == _TV_SEARCH_SHOW_FREQ)
 915          void CShowAutoSearchSliderInOSD(WORD ucCurrentValue)
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 16  

 916          {
 917   1          CShowFreq(ucCurrentValue);
 918   1      }                           
 919          #endif
 920          
 921          //----------------------------------------------------------------------------------------------------
 922          void CShowAutoSerachTotal(BYTE ucSearchTotal)
 923          {
 924   1          Gotoxy(3, _MESSAGE_V_POSITION, BYTE_DISPLAY);
 925   1          CShowNumber(ucSearchTotal, 0);
 926   1      }
 927          
 928          //----------------------------------------------------------------------------------------------------
 929          
 930          #define _STOP_AUTO_SEARCH_KEY_REPT_COUNT       4
 931          bit CKeyStopAutoSearch(void)
 932          {
 933   1          BYTE ucKeyRepCount = 0;
 934   1          BYTE ucNokeyCount  = 0;
 935   1      
 936   1      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
 937   1        #if(_IR_ENABLE)
 938   1          if (ucDetectIR_Cmd == IR_FUNC_MENU)
 939   1        #endif
 940   1      #else
                  if (ucKeyMessage == _MENU_KEY_MESSAGE)
              #endif
 943   1      {
 944   2              ucKeyMessage = _NONE_KEY_MESSAGE;
 945   2               ucDetectIR_Cmd = 0;
 946   2              return 1;
 947   2      }
 948   1      
 949   1          if (_MENU_KEY_MASK == CKeyScan())
 950   1          {
 951   2              ucOSDAdjTemp++;
 952   2          }    
 953   1          else
 954   1          {
 955   2              ucOSDAdjTemp = 0;
 956   2          }    
 957   1      
 958   1          if (ucOSDAdjTemp > _STOP_AUTO_SEARCH_KEY_REPT_COUNT)
 959   1          {
 960   2              ucOSDAdjTemp = 0;
 961   2              ucKeyMessage = _NONE_KEY_MESSAGE;
 962   2              ucDetectIR_Cmd = 0;
 963   2              return 1;
 964   2          }
 965   1          if (_POWER_KEY_MASK == CKeyScan()||ucDetectIR_Cmd==IR_FUNC_POWER)
 966   1              {
 967   2              ucKeyMessage = _NONE_KEY_MESSAGE;
 968   2              ucDetectIR_Cmd = 0;
 969   2              SET_POWERSWITCH();
 970   2              return 1;
 971   2              }
 972   1          return 0; // Continue auto search
 973   1      }
 974          
 975          //----------------------------------------------------------------------------------------------------
 976          
 977          //--------- Manual Search proc ----------------------------------
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 17  

 978          void MManualSearchAdjProc(void)
 979          {
 980   1          switch(ucKeyMessage)
 981   1          {
 982   2              // Move item
 983   2      #if(_USE_UD_LR_KEY_MSG)
 984   2              case VK_F_UP:
 985   2              case VK_F_DOWN:
 986   2                  MManualSearchAdjMenu();
 987   2                  COsdProc();
 988   2                  break;
 989   2      #endif
 990   2      
 991   2              // Exit item
 992   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
 993   2              case VK_ENTER: 
 994   2      #endif
 995   2              case VK_AUTO:
 996   2              case VK_IR_EXIT:
 997   2              case VK_MENU:        MManualSearchAdjMenu();       break;
 998   2      
 999   2              // Adjust
1000   2      #if(_USE_UD_LR_KEY_MSG)
1001   2              case VK_F_LEFT:
1002   2      #endif
1003   2              case VK_LEFT:        MManualSearchAdjLR(1);        break;
1004   2      
1005   2              // Adjust
1006   2      #if(_USE_UD_LR_KEY_MSG)
1007   2              case VK_F_RIGHT:
1008   2      #endif
1009   2              case VK_RIGHT:       MManualSearchAdjLR(0);        break;
1010   2      
1011   2              // Other key
1012   2              default:             COthterKeyAction();           break;
1013   2          }
1014   1      }
1015          
1016          //----------------------------------------------------------------------------------------------------
1017          void MManualSearchAdjMenu(void)
1018          {
1019   1          ucOsdState = MENU_MANUAL_SEARCH;
1020   1          CClearMsg(_CLEAR_AND_EXIT_SUB_ITEM);
1021   1      }
1022          
1023          //----------------------------------------------------------------------------------------------------
1024          void MManualSearchAdjLR(BYTE LR)
1025          {
1026   1      #if(_NTSC_SEARCH_TABLE)
              
                  CClearMsg(_CLEAR_MSG_ONLY);
              
                  LR = _GET_CATV_AIR();
                  
                  LR = 1 - LR;
                  
                  _SET_CATV_AIR(LR);
                  CEepromSaveSystemData(); // Save Adjust result
              
                          CenterTextout((BYTE *)sTVType[ucTVType], 10, _MESSAGE_V_POSITION);
                          CenterTextout((BYTE *)sCATV_AIR[_GET_CATV_AIR()], 18, _MESSAGE_V_POSITION);
              
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 18  

              
                      CAdjustBackgroundColor(0x00, 0x00, 0xFF);                               
                       CScalerSetBit(_VDISP_CTRL_28, ~_BIT5, _BIT5); // Set bluebackground off
              
              #else      
1045   1          CManualSearch((bit)LR,stVDCColor.CurrentChannel);
1046   1          CTimerDelayXms(200);
1047   1      #endif
1048   1      }
1049          
1050          //--------- Tuning proc ----------------------------------
1051          void MTuningAdjProc(void)
1052          {
1053   1          switch(ucKeyMessage)
1054   1          {
1055   2              // Move item
1056   2      #if(_USE_UD_LR_KEY_MSG)
1057   2              case VK_F_UP:
1058   2              case VK_F_DOWN:
1059   2                  MTuningAdjMenu();
1060   2                  COsdProc();
1061   2                  break;
1062   2      #endif
1063   2      
1064   2              // Exit item
1065   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
1066   2              case VK_ENTER: 
1067   2      #endif
1068   2              case VK_AUTO:
1069   2               case VK_IR_EXIT:
1070   2              case VK_MENU:        MTuningAdjMenu();       break;
1071   2      
1072   2              // Adjust
1073   2      #if(_USE_UD_LR_KEY_MSG)
1074   2              case VK_F_LEFT:
1075   2      #endif
1076   2              case VK_LEFT:        MTuningAdjLR(1);        break;
1077   2      
1078   2              // Adjust
1079   2      #if(_USE_UD_LR_KEY_MSG)
1080   2              case VK_F_RIGHT:
1081   2      #endif
1082   2              case VK_RIGHT:       MTuningAdjLR(0);        break;
1083   2      
1084   2              // Other key
1085   2              default:             COthterKeyAction();     break;
1086   2          }
1087   1      }
1088          
1089          //----------------------------------------------------------------------------------------------------
1090          void MTuningAdjMenu(void)
1091          {
1092   1          ucOsdState = MENU_TUNING;
1093   1          CClearMsg(_CLEAR_AND_EXIT_SUB_ITEM);
1094   1      #if(_VIDEO_CHIP == _VDC_TB1334)
1095   1          CTimerDelayXms(100);
1096   1          if (gmi_CModeLocked())
1097   1              gmi_CSetVDCFreeRunMode(_VDC_FREE_RUN_MODE_TO_AUTO);
1098   1          else
1099   1              gmi_CSetVDCFreeRunMode((CHECK60HZ()) ? _VDC_FREE_RUN_MODE_TO_60HZ : _VDC_FREE_RUN_MODE_TO_50HZ);
1100   1      #endif
1101   1      }
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 19  

1102          
1103          //----------------------------------------------------------------------------------------------------
1104          void MTuningAdjLR(BYTE LR)
1105          {
1106   1          SET_KEYREPEATENABLE();
1107   1                                     
1108   1      #if(_TV_SEARCH_SHOW_TYPE != _TV_SEARCH_SHOW_FREQ)
                  Gotoxy(14, _MESSAGE_V_POSITION, BYTE_DISPLAY);
                  Textout((BYTE *)sTuningState[LR]);
              #endif
1112   1      
1113   1          CTuningCurrentChannel((bit)LR,stVDCColor.CurrentChannel);
1114   1          CSaveChannelFreq(CLoadChannelFreq(stVDCColor.CurrentChannel), stVDCColor.CurrentChannel);
1115   1      
1116   1      #if(_TV_SEARCH_SHOW_TYPE == _TV_SEARCH_SHOW_FREQ)
1117   1          CShowCurrentChannelFreq();
1118   1      #endif              
1119   1      }
1120          
1121          //--------- Channel PROC ----------------------------------
1122          void MChannelAdjProc(void)
1123          {             
1124   1          switch(ucKeyMessage)
1125   1          {
1126   2              // Move item
1127   2      #if(_USE_UD_LR_KEY_MSG)
1128   2              case VK_F_UP:
1129   2              case VK_F_DOWN:
1130   2                  MChannelAdjMenu();
1131   2                  COsdProc();
1132   2                  break;
1133   2      #endif
1134   2      
1135   2              // Exit item
1136   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
1137   2              case VK_ENTER: 
1138   2      #endif
1139   2              case VK_AUTO:
1140   2              case VK_IR_EXIT:
1141   2              case VK_MENU:        MChannelAdjMenu();       break;
1142   2      
1143   2              // Adjust
1144   2      #if(_USE_UD_LR_KEY_MSG)
1145   2              case VK_F_LEFT:
1146   2      #endif
1147   2              case VK_LEFT:        MChannelAdjLR(1);        break;
1148   2      
1149   2              // Adjust
1150   2      #if(_USE_UD_LR_KEY_MSG)
1151   2              case VK_F_RIGHT:
1152   2      #endif
1153   2              case VK_RIGHT:       MChannelAdjLR(0);        break;
1154   2      
1155   2              // Other key
1156   2              default:             COthterKeyAction();      break;
1157   2          }
1158   1      }
1159          //----------------------------------------------------------------------------------------------------
1160          void MChannelAdjMenu(void)
1161          {
1162   1      #if(_KEY_TYPE_OSD007== _5KEY_SUPPORT)
                 if(ucOsdState==MENU_CHANEL_SP)
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 20  

                      {
                        COsdFxDisableOsd();
                       CTimerDelayXms(100);
                      }
                   else
                      {
                  ucOsdState = MENU_CHANNEL;
                  CClearMsg(_CLEAR_AND_EXIT_SUB_ITEM);
                      }
              #else
1174   1          ucOsdState = MENU_CHANNEL;
1175   1          CClearMsg(_CLEAR_AND_EXIT_SUB_ITEM);
1176   1      #endif
1177   1      }
1178          
1179          //----------------------------------------------------------------------------------------------------
1180          void MChannelAdjLR(BYTE LR)
1181          {
1182   1          BYTE ucmaxchannel = CloadMaxChannelNumber(1);
1183   1          BYTE ucminchannel = CloadMinChannelNumber();
1184   1          BYTE ucTemp=CLoadChannelColorType(stVDCColor.CurrentChannel);
1185   1          stVDCColor.CurrentChannel = ValueInRangeChange(ucminchannel,ucmaxchannel,stVDCColor.CurrentChannel,LR,
             -1);
1186   1              // Remove "Ta" noise when change channel  060731
1187   1          gmi_CI2CWrite9886(CLoadChannelColorType(stVDCColor.CurrentChannel),_TUNER_MUTE_ON,_NORMAL_MODE);
1188   1          CModeResetTVMode();
1189   1       
1190   1          //CAdjustBackgroundColor(0x00, 0x00, 0x00);     
1191   1         // CScalerSetBit(_VDISP_CTRL_28, ~_BIT5, _BIT5);
1192   1         // bChangeChannel = 1;
1193   1      
1194   1          CClearMsg(_CLEAR_MSG_ONLY);
1195   1      #if(_KEY_TYPE_OSD007== _5KEY_SUPPORT)
                if(ucOsdState == MENU_CHANEL_SP)      
                      {
                   OSDClear(0, 4, 0, COL_WIDTH - 2, 0x00, BYTE_DISPLAY);
                  OSDClear(4, 8, 1, COL_WIDTH - 2, 0x8C, BYTE_ATTRIB);
                   CSetTVChannel(stVDCColor.CurrentChannel);
              #if(_NTSC_SEARCH_TABLE)
                   CLeftAlignTextout((BYTE *)sCATV_AIR[_GET_CATV_AIR()], 4, 2);
               #else
                  CLeftAlignTextout((BYTE *)sTV, 4, 2);    //060815
              #endif
                 
                 Gotoxy(9, 2, BYTE_DISPLAY);
                 CShowNumber(stVDCColor.CurrentChannel, 0);
                 
                      ucTVType=CLoadChannelColorType(stVDCColor.CurrentChannel);
                      CLeftAlignTextout((BYTE  *)sTVType[ucTVType], 14, 2);
                      }
                  else
              #endif          
1215   1      {
1216   2          CSetTVChannel(stVDCColor.CurrentChannel);
1217   2          
1218   2          Gotoxy(10,_MESSAGE_V_POSITION,BYTE_DISPLAY);
1219   2          CShowNumber(stVDCColor.CurrentChannel, 0);
1220   2          CenterTextout((BYTE *)sTVType[ucTVType], 18, _MESSAGE_V_POSITION);
1221   2      }
1222   1          // Save current channel
1223   1          CEepromSaveVedioColor();    
1224   1          //gmi_CI2CWrite9886(CLoadChannelColorType(stVDCColor.CurrentChannel),_TUNER_MUTE_OFF,_NORMAL_MODE);
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 21  

1225   1          _SET_CHANNEL_FOR_AUDIO(1);
1226   1          CModeResetTVNtscToPal();
1227   1      
1228   1      }
1229          
1230          
1231          //--------- Swap PROC ----------------------------------
1232          void MSwapAdjProc(void)
1233          {
1234   1          switch(ucKeyMessage)
1235   1          {
1236   2              // Move item
1237   2      #if(_USE_UD_LR_KEY_MSG)
1238   2              case VK_F_UP:
1239   2              case VK_F_DOWN:
1240   2                  MSwapAdjMenu();
1241   2                  COsdProc();
1242   2                  break;
1243   2      #endif
1244   2      
1245   2              // Exit item
1246   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
1247   2              case VK_ENTER: 
1248   2      #endif
1249   2              case VK_AUTO:
1250   2              case VK_IR_EXIT:
1251   2              case VK_MENU:        MSwapAdjMenu();       break;
1252   2      
1253   2      
1254   2              // Adjust
1255   2      #if(_USE_UD_LR_KEY_MSG)
1256   2              case VK_F_LEFT:
1257   2      #endif
1258   2              case VK_LEFT:        MSwapAdjLR(1);        break;
1259   2      
1260   2              // Adjust
1261   2      #if(_USE_UD_LR_KEY_MSG)
1262   2              case VK_F_RIGHT:
1263   2      #endif
1264   2              case VK_RIGHT:       MSwapAdjLR(0);        break;
1265   2      
1266   2              // Other key
1267   2              default:             COthterKeyAction();   break;
1268   2          }
1269   1      }
1270          
1271          //----------------------------------------------------------------------------------------------------
1272          void MSwapAdjMenu(void)
1273          {
1274   1          WORD ucSwapFreq        = CLoadChannelFreq(stVDCColor.CurrentChannel);
1275   1          BYTE ucSwapColorSystem = CLoadChannelColorType(stVDCColor.CurrentChannel);
1276   1          BYTE ucSwapSoundSystem = CLoadChannelSoundType(stVDCColor.CurrentChannel);
1277   1          BYTE ucSwapSkipSysytem= CLoadChannelSkip(stVDCColor.CurrentChannel);
1278   1      
1279   1      #if(_CHANGE_SOURCE_BACKGROUCD_COLOR == _BLUE_COLOR)
                          CAdjustBackgroundColor(0x00, 0x00, 0xff);
              #else
1282   1                  CAdjustBackgroundColor(0x00, 0x00, 0x00);
1283   1      #endif
1284   1          CScalerSetBit(_VDISP_CTRL_28, ~_BIT5, _BIT5);
1285   1      
1286   1          bChangeChannel = 1;
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 22  

1287   1          
1288   1          CSaveChannelFreq(CLoadChannelFreq(ucPrevChannel), stVDCColor.CurrentChannel);
1289   1          CSaveChannelColorType( stVDCColor.CurrentChannel,CLoadChannelColorType(ucPrevChannel));
1290   1          CSaveChannelSoundType( stVDCColor.CurrentChannel,CLoadChannelSoundType(ucPrevChannel));
1291   1          CSaveChannelSkip(CLoadChannelSkip(ucPrevChannel),stVDCColor.CurrentChannel);
1292   1              
1293   1          CSaveChannelFreq(ucSwapFreq, ucPrevChannel);
1294   1          CSaveChannelColorType(ucPrevChannel,ucSwapColorSystem);
1295   1          CSaveChannelSoundType(ucPrevChannel,ucSwapSoundSystem);  
1296   1          CSaveChannelSkip(ucSwapSkipSysytem,ucPrevChannel);
1297   1          
1298   1          CSetTVChannel(stVDCColor.CurrentChannel);
1299   1          
1300   1          ucOsdState = MENU_SWAP;
1301   1          CClearMsg(_CLEAR_MSG_ONLY);
1302   1          ShowMode();
1303   1          CSetItemWindowState(_SELECT_SUB_WINDOW, _MOVE_STATE);
1304   1      }
1305          
1306          //----------------------------------------------------------------------------------------------------
1307          void MSwapAdjLR(BYTE LR)
1308          {
1309   1          CClearMsg(_CLEAR_MSG_ONLY);
1310   1      
1311   1          stVDCColor.CurrentChannel = ValueInRangeChange(CloadMinChannelNumber(),CloadMaxChannelNumber(0),stVDCC
             -olor.CurrentChannel,LR,1);
1312   1          
1313   1          
1314   1          CSetTVChannel(stVDCColor.CurrentChannel);
1315   1          
1316   1          
1317   1          Gotoxy(14,_MESSAGE_V_POSITION,BYTE_DISPLAY);
1318   1          CShowNumber(stVDCColor.CurrentChannel, 0);
1319   1      }
1320          
1321          //--------- Skip PROC ----------------------------------
1322          void MSkipAdjProc(void)
1323          {
1324   1          switch(ucKeyMessage)
1325   1          {
1326   2              // Move item
1327   2      #if(_USE_UD_LR_KEY_MSG)
1328   2              case VK_F_UP:
1329   2              case VK_F_DOWN:
1330   2                  MSkipAdjMenu();
1331   2                  COsdProc();
1332   2                  break;
1333   2      #endif
1334   2      
1335   2              // Exit item
1336   2      #if(_MENU_FUNC == _MENU_EXIT_ITEM)
1337   2              case VK_ENTER: 
1338   2      #endif
1339   2              case VK_AUTO:
1340   2              case VK_IR_EXIT:
1341   2              case VK_MENU:        MSkipAdjMenu();       break;
1342   2      
1343   2              // Adjust
1344   2      #if(_USE_UD_LR_KEY_MSG)
1345   2              case VK_F_LEFT:
1346   2      #endif
1347   2              case VK_LEFT:        MSkipAdjLR(1);        break;
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 23  

1348   2      
1349   2              // Adjust
1350   2      #if(_USE_UD_LR_KEY_MSG)
1351   2              case VK_F_RIGHT:
1352   2      #endif
1353   2              case VK_RIGHT:       MSkipAdjLR(0);        break;
1354   2      
1355   2              // Other key
1356   2              default:             COthterKeyAction();   break;
1357   2          }
1358   1      }
1359          
1360          //----------------------------------------------------------------------------------------------------
1361          void MSkipAdjMenu(void)
1362          {
1363   1          ucOsdState = MENU_SKIP;
1364   1          CClearMsg(_CLEAR_AND_EXIT_SUB_ITEM);
1365   1      }
1366          
1367          //----------------------------------------------------------------------------------------------------
1368          void MSkipAdjLR(BYTE LR)
1369          {
1370   1          CClearMsg(_CLEAR_MSG_ONLY);
1371   1      
1372   1          LR = CLoadChannelSkip(stVDCColor.CurrentChannel);
1373   1          
1374   1          LR = 1 - LR;
1375   1          
1376   1          // Save current channel skip state
1377   1          CSaveChannelSkip((bit)LR, stVDCColor.CurrentChannel);
1378   1          
1379   1          CenterTextout((BYTE *)sOn_Off[LR][GET_LANGUAGE],15,_MESSAGE_V_POSITION);
1380   1      }
1381          
1382          //----------------------------------------------------------------------------------------------------
1383          
1384          
1385          //-------------------------------------------------------------------------
1386          //
1387          // ucOption:   0x01: Only show ucTvNumber          _SHOW_CH_TV_NUMBER
1388          //             0x02: Show tv type                  _SHOW_CH_TV_TYPE
1389          //             0x04: Show sound type               _SHOW_CH_SOUND_TYPE
1390          //
1391          //-------------------------------------------------------------------------
1392          void CShowTVNumber(const BYTE ucTvNumber, const BYTE ucOption)
1393          {
1394   1          BYTE y;
1395   1      
1396   1          CInitOSDMainFrame();
1397   1          SetOSDDouble(OSD_DOUBLE_HEIGHT_ENABLE | OSD_DOUBLE_WIDTH_ENABLE);
1398   1         //  if (_GET_OSD_SIZE()) 
1399   1         //     OSDPosition(_OSD_DOUBLE_WIDTH(55), _OSD_DOUBLE_HEIGHT(30), _RIGHT_UP_OSD_H_OFFSET, 1, 0x03);
1400   1         //   else
1401   1             OSDPosition(55, 30, _RIGHT_UP_OSD_H_OFFSET, 1, 0x03);
1402   1          
1403   1      #if(_AUTO_POWER_DOWN)
1404   1          bTimerOnScreen = 0;
1405   1      #endif
1406   1          ucOsdState     = MENU_SHOW_MESSAGE_SATAE;
1407   1          
1408   1          OSDLine(0, 0, 10, 0x20, BYTE_COLOR);
1409   1          OSDLine(1, 0, 10, 0x20, BYTE_COLOR);
C51 COMPILER V8.16   OSDTV007                                                              04/05/2012 11:15:28 PAGE 24  

1410   1          OSDLine(2, 0, 10, 0x20, BYTE_COLOR);
1411   1      
1412   1          y = 0;
1413   1          if(ucOption & _SHOW_CH_TV_NUMBER)
1414   1          {
1415   2              Gotoxy(1,y,BYTE_DISPLAY);    
1416   2              CShowNumber(ucTvNumber, 0);
1417   2              y++;
1418   2          }
1419   1          if(ucOption & _SHOW_CH_TV_TYPE)
1420   1          {
1421   2      #if(_NTSC_SEARCH_TABLE)
                       CLeftAlignTextout((BYTE *)sCATV_AIR[_GET_CATV_AIR()], 1, y++);
                      CLeftAlignTextout((BYTE *)sTVType[ucTVType],1,y);
              #else
1425   2              CLeftAlignTextout((BYTE *)sTVType[ucTVType],1,y);
1426   2      #endif
1427   2              y++;
1428   2          }
1429   1      /*  if(ucOption & _SHOW_CH_SOUND_TYPE)
1430   1          {
1431   1          RightAlignTextOut((BYTE *)sTVSoundType[CLoadChannelSoundType(stVDCColor.CurrentChannel)], 8, y);
1432   1          y++;
1433   1      }*/
1434   1      
1435   1          COsdFxEnableOsd();  
1436   1          CTimerReactiveTimerEvent(SEC(10),COsdDispOsdTimerEvent);
1437   1      }
1438          
1439          //-------------------------------------------------------------------------
1440          
1441          
1442          
1443          #endif  //#if(_VIDEO_TV_SUPPORT)
1444          #endif  //#if(OSD_TYPE == OSD007)


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2836    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      29
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
