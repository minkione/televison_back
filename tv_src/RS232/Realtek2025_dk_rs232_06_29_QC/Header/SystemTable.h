//----------------------------------------------------------------------------------------------------
// ID Code      : SystemTable.h No.0004
// Update Note  : 
//
//----------------------------------------------------------------------------------------------------

#ifdef __MAIN__

//----------------------------------------------------------------------------------------------------
// Initial Tables
//----------------------------------------------------------------------------------------------------
#if (_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2546N || _SCALER_TYPE == _RTD2525L)
BYTE code tSCALER_POWERUP_INITIAL[] =
{
#if(_SCALER_TYPE == _RTD2553V)
    5, _AUTOINC,        _DDC_CTRL_F7,                   0x0c,0x00,
#elif(_SCALER_TYPE == _RTD2525L)
    5, _AUTOINC,        _DDC_CTRL_F7,                   0x1c,0x00,
#endif
    4, _AUTOINC,        _DDC_SET_SLAVE_F4,              0x6a,

#if (_SCALER_18V_POWER_TYPE == _TYPE_REGULATOR)
    5, _AUTOINC,        _POWER_ON_RESET_REGULATOR_95,   0x17,0x88, //Regulator
  //  5, _AUTOINC,        _POWER_ON_RESET_REGULATOR_95,   0x17,0xE8, //Regulator
#else
    5, _AUTOINC,        _POWER_ON_RESET_REGULATOR_95,   0x13,0x88, //BJT
#endif

    4,  _NON_AUTOINC,   _TCON_ADDR_PORT_8B,             0x00,
    11, _NON_AUTOINC,   _TCON_DATA_PORT_8C,             0x01,0x08,0x00,0x00,0x00,0x00,0x00,0x00,

    5,  _AUTOINC,       _IRQ_CTRL_04,                   0x00,0x00,

    4,  _NON_AUTOINC,   _VGIP_DELAY_CTRL_07,            0x00,

    4,  _NON_AUTOINC,   _IPH_ACT_WID_H_0B,              0x00,

    6,  _AUTOINC,       _IVS_DELAY_11,                  0x00,0x00,0x00,
    
    4,  _NON_AUTOINC,   _DISP_TIMING_46,           (_ABCLK_EN << 3)   | 
                                                        (_ACLK_POLARITY_INV << 2) |
                                                        (_DCLK_EN << 1) |
                                                        _BCLK_POLARITY_INV,
    4,  _NON_AUTOINC,   _SYNC_SELECT_47,                0x00,

#if(_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2546N)
    5,  _AUTOINC,       _CLAMP_START_5A,                0x04,0x10,
    5,  _AUTOINC,       _CLAMP_CTRL0_5C,                0x02,0x01,
#elif(_SCALER_TYPE == _RTD2525L)
    4,  _NON_AUTOINC,   _SYNC_PROC_ACCESS_PORT_5C,      0x00,
    11,  _NON_AUTOINC,  _SYNC_PROC_DATA_PORT_5D,        0x04,0x10,0x04,0x10,0x02,0x01,0x02,0x21,

    4,  _NON_AUTOINC,   _PS_ACCESS_PORT_8D,    		    0x00, //KEN 2006/03/17
	4,  _NON_AUTOINC,   _PS_DATA_PORT_8E,				0x00,
#endif
    4,  _NON_AUTOINC,   _COLOR_CTRL_62,                 0x03,

    4,  _NON_AUTOINC,   _GAMMA_CTRL_67,                 0x00,

    4,  _NON_AUTOINC,   _OVERLAY_CTRL_6C,               0x00,

    4,  _AUTOINC,       _YUV2RGB_CTRL_89,               0x00,

    4,  _NON_AUTOINC,   _HS_SCHMITT_TRIGGER_CTRL_97,    0xe9,   //0xc3,  //KEN 2005/09/23

    7,  _AUTOINC,       _PLL_DIV_CTRL_98,               0x04,0x47,0x00,0x18,

    11, _AUTOINC,       _PLL1_M_A1,                     0x0f,0x80,0x33,0x0e,0x04,0x04,0x6f,0x09,

    4,  _NON_AUTOINC,   _PLL2_PHASE_INTERPOLATION_AD,   0x50,

    6,  _AUTOINC,       _DCLK_FINE_TUNE_OFFSET_MSB_B5,  0x00,0x00,0x04,

    4,  _NON_AUTOINC,   _ADC_ACCESS_PORT_DC,            0x8c,
    4,  _NON_AUTOINC,   _ADC_DATA_PORT_DD, 	            0x08,
    4,  _NON_AUTOINC,   _ADC_ACCESS_PORT_DC,            0x00,

    4,  _NON_AUTOINC,   _TMDS_MEAS_RESULT0_BD,          0x02,

    11, _AUTOINC,       _TMDS_OUTPUT_CTRL_C1,           0x80,0x20,0x03,0x00,0x31,0x70,0xe3,0x24,

    7,  _AUTOINC,       _UP_DOWN_CTRL0_D1,              0x92,0x10,0x30,0x00,

    4,  _NON_AUTOINC,   _WATCHDOG_CTRL1_DA,             0x00,

    4,  _NON_AUTOINC,  	_ADC_ACCESS_PORT_DC,			0x80,
    4,  _NON_AUTOINC,   _ADC_DATA_PORT_DD,              0x00 | (_ADC_DEFFERENTIAL << 2),

    4,  _NON_AUTOINC,  	_ADC_ACCESS_PORT_DC,			0x8a,
    5,  _NON_AUTOINC,   _ADC_DATA_PORT_DD,              0x25,0x25,  //for SOG0, SOG1 CTRL

    4,  _NON_AUTOINC,   _ADC_ACCESS_PORT_DC,            0x8e,
    4,  _NON_AUTOINC,   _ADC_DATA_PORT_DD,              0x00,

    4,  _NON_AUTOINC,   _ADC_ACCESS_PORT_DC,            0x00,

    4,  _NON_AUTOINC,   _DPLL_OTHER_B2,                 0x16,

#if(_M2PLL_USE == _ON)

    4,  _NON_AUTOINC,   _M2PLL_ACCESS_PORT_B3,          0x00,
    4,  _NON_AUTOINC,   _M2PLL_DATA_PORT_B4,            0xA2,

#else

    //4,  _NON_AUTOINC,   _M2PLL_ACCESS_PORT_B3,          0x00,
    //4,  _NON_AUTOINC,   _M2PLL_DATA_PORT_B4,            0x12,
    
    // Issac 0823
    4,  _NON_AUTOINC,   _M2PLL_ACCESS_PORT_B3,          0x00,
    8,  _NON_AUTOINC,   _M2PLL_DATA_PORT_B4,            0x92,0x94,0x00,0x19,0x19,	

#endif

    4,  _AUTOINC,       _HDCP_PORT_CTRL_D7,             0x01,

    4,  _NON_AUTOINC,   _NEW_DV_DLY_20,                 0x40,

    4,  _NON_AUTOINC,   _NEW_DV_CTRL_1F,                0xa0,

    4, _AUTOINC,        _DDC_ENABLE_FA,                 0x04,

    4, _AUTOINC,        _DDC_DVI_ENABLE_FD,             0x04, //V306 modify
                 
    4,  _NON_AUTOINC,   _VDISP_CTRL_28,                 (0x0b | (_DISPLAY_PORT >> 1) | (_DISP_BIT >> 3)),

    4,  _NON_AUTOINC,   _VSYNC_COUNTER_LEVEL_MSB_4C,    0x0b, // eric 0901 add

    _END
};

#elif (_SCALER_TYPE == _RTD2547D)

BYTE code tSCALER_POWERUP_INITIAL[] =
{
    5,  _AUTOINC,       _DDC_CTRL_F7,                   0x1c,0x00,
    4,  _NON_AUTOINC,   _DDC_SET_SLAVE_F4,              0x6a,

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE7,
    4,  _NON_AUTOINC,   _P7_POWER_ON_RESET_A1,          0x00,

    //Support VBI
    7,  _AUTOINC,       _P7_VBI_CTRL_B8,                0x01,0x11,0x11,0x70, 

    4,  _NON_AUTOINC,   _TCON_ADDR_PORT_8B,             _TCON_CTRL0_00,
    9,  _NON_AUTOINC,   _TCON_DATA_PORT_8C,             0x01,0x00,0x00,0x00,0x00,0x00,

    4,  _NON_AUTOINC,   _TCON_ADDR_PORT_8B,             _TCON_RSDS_OUTPUT_CTRL0_C0,
    6,  _NON_AUTOINC,   _TCON_DATA_PORT_8C,             0x00,0x00,0x00,

    4,  _NON_AUTOINC,   _IRQ_CTRL0_04,                  0x00,
    4,  _NON_AUTOINC,   _HDMI_STATUS0_05,               0x80,

    4,  _NON_AUTOINC,   _VGIP_CTRL_10,                  0x00,    

    4,  _NON_AUTOINC,   _VGIP_DELAY_CTRL_12,            0x00,

    4,  _NON_AUTOINC,   _IPH_ACT_WID_H_16,              0x00,

    6,  _AUTOINC,       _IVS_DELAY_1C,                  0x00,0x00,0x00,

    4,  _NON_AUTOINC,   _SYNC_SELECT_47,                0x00,

    4,  _NON_AUTOINC,   _SYNC_PROC_ACCESS_PORT_5C,      _SYNC_G_CLAMP_START_00,
    11, _NON_AUTOINC,   _SYNC_PROC_DATA_PORT_5D,        0x04,0x10,0x04,0x10,0x02,0x01,0x02,0x21,

    4,  _NON_AUTOINC,   _COLOR_CTRL_62,                 0x03,

    4,  _NON_AUTOINC,   _GAMMA_CTRL_67,                 0x00,

    4,  _NON_AUTOINC,   _OVERLAY_CTRL_6C,               0x00,

    4,  _NON_AUTOINC,   _YUV2RGB_CTRL_9C,               0x00,

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE7,
    4,  _NON_AUTOINC,   _P7_HS_SCHMITT_TRIGGER_CTRL_A4, 0xe9,   //0xc3,  //KEN 2005/09/23

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE1,
    7,  _AUTOINC,       _P1_PLL_DIV_CTRL_A1,            0x04,0x47,0x00,0x18,

    11, _AUTOINC,       _P1_PLL1_M_AA,                  0x0f,0x80,0x33,0x0e,0x04,0x04,0x6f,0x09,

    4,  _NON_AUTOINC,   _P1_PLL2_PHASE_INTERPOLATION_B6,0x50,

    6,  _AUTOINC,       _P1_DCLK_FINE_TUNE_OFFSET_MSB_BC,0x00,0x00,0x04,

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE0,
    4,  _NON_AUTOINC,   _P0_ADC_POWER_AD, 	            0x08,

//    4,  _NON_AUTOINC,   _P2_ANALOG_COMMON_CTRL2_AB,     0x70,//關DC Offeset 以免CLK收不到

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE2,
    11, _AUTOINC,       _P2_TMDS_OUTPUT_CTRL_A6,        0x80,0x6f,0x03,0x00,0x31,0x70,0xe3,0x24,

    7,  _AUTOINC,       _P2_ADAPTIVE_EQUALIZER_B4,      0x02,0x58,0x00,0x00,

    4,  _NON_AUTOINC,   _P2_HDMI_APC_C8,                0x01,//For DVI/HDMI enable
    4,  _NON_AUTOINC,   _P2_HDMI_ADDR_PORT_C9,          _P2_HDMI_AVMCR_30,
#if(_HDMI_SUPPORT == _ON)
    7,  _NON_AUTOINC,   _P2_HDMI_DATA_PORT_CA,          0x68,0x00,0x80,0x00,//For Audio Output Enable and Mute
#elif(_TMDS_SUPPORT == _ON)
    4,  _NON_AUTOINC,   _P2_HDMI_DATA_PORT_CA,          0x08,//Enable Video Output
#endif

#if(_HDMI_SUPPORT == _ON)
    4,  _NON_AUTOINC,   _P2_HDMI_ADDR_PORT_C9,          _P2_HDMI_PVGCR0_45,
    5,  _NON_AUTOINC,   _P2_HDMI_DATA_PORT_CA,          0x09,0x00,//For HDMI Packet
    4,  _NON_AUTOINC,   _P2_HDMI_ADDR_PORT_C9,          _P2_HDMI_ACRCR_51,
    4,  _NON_AUTOINC,   _P2_HDMI_DATA_PORT_CA,          0x44,//For HDMI Color space auto switch between 4:2:2/4:4:4
    4,  _NON_AUTOINC,   _P2_HDMI_ADDR_PORT_C9,          _P2_HDMI_DPCR0_38,
    4,  _NON_AUTOINC,   _P2_HDMI_DATA_PORT_CA,          0x00,//Power On Audio PLL
    4,  _NON_AUTOINC,   _P2_HDMI_ADDR_PORT_C9,          _P2_HDMI_AFCR_03,
    4,  _NON_AUTOINC,   _P2_HDMI_DATA_PORT_CA,          0x06,//Enable Audio FIFO
    4,  _NON_AUTOINC,   _P2_HDMI_ADDR_PORT_C9,          _P2_HDMI_AOCR_62,
    4,  _NON_AUTOINC,   _P2_HDMI_DATA_PORT_CA,          0x00,//Disable SPDIF/I2S Output
#endif

    5,  _AUTOINC,       _WATCH_DOG_CTRL0_0C,            0x00,0x00,

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE0,
    5,  _AUTOINC,       _P0_SOG0_CTRL_AB,               0x20,0x20,  //for SOG CTRL
    4,  _NON_AUTOINC,   _P0_ADC_TEST_CTRL_AF,           0x00,

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE1,
    4,  _NON_AUTOINC,   _P1_DPLL_OTHER_BB,              0x16,//V306 modify

#if(_M2PLL_USE == _ON)

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE1,
    4,  _NON_AUTOINC,   _P1_MULTIPLY_PLL_CTRL0_C4,      0xe0,

#else

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE1,
    4,  _NON_AUTOINC,   _P1_MULTIPLY_PLL_CTRL0_C4,      0xe2,

#endif  // End of #if(_M2PLL_USE == _ON)

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE2,
    6,  _AUTOINC,       _P2_CDR_CTRL0_B0,               0x02,0x0a,0x0a,
    4,  _NON_AUTOINC,   _P2_HDCP_PORT_CTRL_C2,          0x01,

    4,  _NON_AUTOINC,   _DISP_ACCESS_PORT_2A,           _DISP_NEW_DV_DLY_23,
    4,  _NON_AUTOINC,   _DISP_DATA_PORT_2B,             0x40,

    4,  _NON_AUTOINC,   _DISP_ACCESS_PORT_2A,           _DISP_NEW_DV_CTRL_22,
    4,  _NON_AUTOINC,   _DISP_DATA_PORT_2B,             0xa0,

    4,  _NON_AUTOINC,   _DDC_ENABLE_FA,                 0x04,
    4,  _NON_AUTOINC,   _DDC_DVI_ENABLE_FD,             0x04,

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE4,//SDRAM Setting

#if(_OD_SUPPORT == _ON)
#if(_MEMORY_SIZE == _MEMORY_16MB)
    20,  _AUTOINC,      _P4_SDR_CTRL0_A1,               _SDR_ROW_DELAY,_SDR_COL_DELAY,0x0d,0x83,0x23,0x00,0xc0,0x00,0x00,0x11,
                                                        0x22,0x00,0x00,0x00,0x00,0x44,0x88,
#elif(_MEMORY_SIZE == _MEMORY_32MB)
    20,  _AUTOINC,      _P4_SDR_CTRL0_A1,               _SDR_ROW_DELAY,_SDR_COL_DELAY,0x0d,0x83,0x63,0x00,0xc0,0x00,0x00,0x11,
                                                        0x22,0x00,0x00,0x00,0x00,0x44,0x88,
#elif(_MEMORY_SIZE == _MEMORY_64MB)
    20,  _AUTOINC,      _P4_SDR_CTRL0_A1,               _SDR_ROW_DELAY,_SDR_COL_DELAY,0x0d,0x83,0x83,0x00,0xc0,0x00,0x00,0x11,
                                                        0x22,0x00,0x00,0x00,0x00,0x44,0x88,
#elif(_MEMORY_SIZE == _MEMORY_128MB)
    20,  _AUTOINC,      _P4_SDR_CTRL0_A1,               _SDR_ROW_DELAY,_SDR_COL_DELAY,0x0d,0x83,0xc3,0x00,0xc0,0x00,0x00,0x11,
                                                        0x22,0x00,0x00,0x00,0x00,0x44,0x88,
#endif

#elif(_FRC_SUPPORT == _ON)

#if(_MEMORY_SIZE == _MEMORY_16MB)
    20,  _AUTOINC,      _P4_SDR_CTRL0_A1,               _SDR_ROW_DELAY,_SDR_COL_DELAY,0x0d,0x83,0x23,0x00,0xc0,0x00,0x00,0x11,
                                                        0x22,0x44,0x00,0x88,0x00,0x00,0x00,
#elif(_MEMORY_SIZE == _MEMORY_32MB)
    20,  _AUTOINC,      _P4_SDR_CTRL0_A1,               _SDR_ROW_DELAY,_SDR_COL_DELAY,0x0d,0x83,0x63,0x00,0xc0,0x00,0x00,0x11,
                                                        0x22,0x44,0x00,0x88,0x00,0x00,0x00,
#elif(_MEMORY_SIZE == _MEMORY_64MB)
    20,  _AUTOINC,      _P4_SDR_CTRL0_A1,               _SDR_ROW_DELAY,_SDR_COL_DELAY,0x0d,0x83,0x83,0x00,0xc0,0x00,0x00,0x11,
                                                        0x22,0x44,0x00,0x88,0x00,0x00,0x00,
#elif(_MEMORY_SIZE == _MEMORY_128MB)
    20,  _AUTOINC,      _P4_SDR_CTRL0_A1,               _SDR_ROW_DELAY,_SDR_COL_DELAY,0x0d,0x83,0xc3,0x00,0xc0,0x00,0x00,0x11,
                                                        0x22,0x44,0x00,0x88,0x00,0x00,0x00,
#endif
#endif

    8,   _AUTOINC,      _P4_SDR_CLK_DELAY_C0,           0x00, 0x6c, 0x6c, 0x6c, 0x6c,

    _END
};

#else

// RTD2523B
BYTE code tSCALER_POWERUP_INITIAL[] =
{
    5, _AUTOINC,        _DDC_CTRL_F7,                   0x0c,0x00,
    4, _AUTOINC,        _DDC_SET_SLAVE_F4,              0x6a,

#if(_SCALER_TYPE == _RTD2533B)

#if (_SCALER_18V_POWER_TYPE == _TYPE_REGULATOR)
    5, _AUTOINC,        _POWER_ON_RESET_REGULATOR_95,   0x15,0xe8,
#else
    5, _AUTOINC,        _POWER_ON_RESET_REGULATOR_95,   0x15,0x88,
#endif

#elif((_SCALER_TYPE == _RTD2023L) || (_SCALER_TYPE == _RTD2023S) || (_SCALER_TYPE == _RTD2023L_VB) || (_SCALER_TYPE == _RTD2023S_VB))

    5, _AUTOINC,        _POWER_ON_RESET_REGULATOR_95,   0x14,0x88,
    4, _AUTOINC,        _DDC_ENABLE_FA,                 0x04,
    7, _AUTOINC,        _DPLL_CRNT_B0,                  0xc8,0x16,0x62,0x94,

#endif

    4,  _NON_AUTOINC,   _TCON_ADDR_PORT_8B,             0x00,
    11, _NON_AUTOINC,   _TCON_DATA_PORT_8C,             0x01,0x04,0x00,0x00,0x00,0x00,0x00,0x00,

    5,  _AUTOINC,       _IRQ_CTRL_04,                   0x00,0x00,

    4,  _NON_AUTOINC,   _VGIP_DELAY_CTRL_07,            0x00,

    4,  _NON_AUTOINC,   _IPH_ACT_WID_H_0B,              0x00,

    6,  _AUTOINC,       _IVS_DELAY_11,                  0x00,0x00,0x00,
    
    4,  _NON_AUTOINC,   _DISP_TIMING_46,                (_DCLK_DELAY << 4) | 
                                                        (_ABCLK_EN << 3)   | 
                                                        (_ACLK_POLARITY_INV << 2) |
                                                        (_DCLK_EN << 1) |
                                                        _BCLK_POLARITY_INV,
    4,  _NON_AUTOINC,   _SYNC_SELECT_47,                0x02,

    5,  _AUTOINC,       _CLAMP_START_5A,                0x04,0x10,

    4,  _NON_AUTOINC,   _COLOR_CTRL_5E,                 0x03,

    4,  _NON_AUTOINC,   _GAMMA_CTRL_67,                 0x00,

    4,  _NON_AUTOINC,   _OVERLAY_CTRL_6C,               0x00,

    4,  _AUTOINC,       _YUV2RGB_CTRL_89,               0x00,

    4,  _NON_AUTOINC,   _HS_SCHMITT_TRIGGER_CTRL_97,    0xe9,

    7,  _AUTOINC,       _PLL_DIV_CTRL_98,               0x0c,0x47,0x00,0x18,

    11, _AUTOINC,       _PLL1_M_A1,                     0x0f,0x80,0x33,0x0e,0x04,0x04,0x6f,0x0b,

    4,  _NON_AUTOINC,   _PLL2_PHASE_INTERPOLATION_AD,   0x51,

    6,  _AUTOINC,       _DCLK_FINE_TUNE_OFFSET_MSB_B5,  0x00,0x00,0x04,

    4,  _NON_AUTOINC,   _ADC_POWER_CTRL_E8,             0x08,

    4,  _NON_AUTOINC,   _TMDS_MEAS_RESULT0_BD,          0x02,

    11, _AUTOINC,       _TMDS_OUTPUT_CTRL_C1,           0x80,0x20,0x03,0x00,0x31,0x70,0xe3,0x24,

    7,  _AUTOINC,       _UP_DOWN_CTRL0_D1,              0x92,0x10,0x30,0x00,

    4,  _NON_AUTOINC,   _WATCHDOG_CTRL1_DA,             0x00,

    4,  _NON_AUTOINC,   _ADC_RGB_CTRL_DC,               0x52 | (_ADC_DEFFERENTIAL << 2), 

    5,  _AUTOINC,       _SOG0_CTRL_E6,                  0x20,0x20,

    //V306 modify
    4,  _NON_AUTOINC,   _ADC_TEST_EA,                   0x00, //0x08 for version A/B/C

    // You should add 1Mohm pull-low resister on SOG pin.
  
#if(_M2PLL_USE == _ON)
    4,  _NON_AUTOINC,   _MULTI_PLL_CTRL0_B2,            0xe0,
#else

#if(_SCALER_TYPE == _RTD2533B)

    4,  _NON_AUTOINC,   _MULTI_PLL_CTRL0_B2,            0xe2,

#elif((_SCALER_TYPE == _RTD2023L) || (_SCALER_TYPE == _RTD2023S) || (_SCALER_TYPE == _RTD2023L_VB) || (_SCALER_TYPE == _RTD2023S_VB))

    4,  _NON_AUTOINC,   _MULTI_PLL_CTRL0_B2,            0x62,

#endif

#endif  // End of #if(_M2PLL_USE == _ON)

    4,  _NON_AUTOINC,   _NEW_DV_DLY_20,                 0x40,

    4,  _NON_AUTOINC,   _NEW_DV_CTRL_1F,                0xa0,



#if((_SCALER_TYPE == _RTD2023L) || (_SCALER_TYPE == _RTD2023S) || (_SCALER_TYPE == _RTD2023L_VB) || (_SCALER_TYPE == _RTD2023S_VB))

    4,  _NON_AUTOINC,   _PLL_OTHER_B4,                  0x06, //V306 modify

#endif

    4,  _NON_AUTOINC,   _DDC_ENABLE_FA,                 0x04, //V306 modify

    4,  _NON_AUTOINC,   _DDC_DVI_ENABLE_FD,             0x04, //V306 modify

    4,  _NON_AUTOINC,   _VDISP_CTRL_28,                 (0x0b | (_DISPLAY_PORT >> 1) | (_DISP_BIT >> 3)),

#if((_SCALER_TYPE == _RTD2023L) || (_SCALER_TYPE == _RTD2023S) || (_SCALER_TYPE == _RTD2023L_VB) || (_SCALER_TYPE == _RTD2023S_VB))
    4,  _NON_AUTOINC,   _VSYNC_COUNTER_LEVEL_MSB_4C,    0x03, // eric 0901 add
#else
    4,  _NON_AUTOINC,   _VSYNC_COUNTER_LEVEL_MSB_4C,    0x23, // eric 0901 add
#endif

    _END
};

#endif   // end #if (_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2525L)


//----------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------
// OSD Power Up Initial
//----------------------------------------------------------------------------------------------------
BYTE code tOSD_POWERUP_INITIAL[] =
{
    6,  _AUTOINC,       _OSD_ADDR_MSB_90,               0x40,0x02,0x10,
    6,  _AUTOINC,       _OSD_ADDR_MSB_90,               0x00,0x03,0x70,
    6,  _AUTOINC,       _OSD_ADDR_MSB_90,               0x40,0x03,0x08,

#if (_SCALER_TYPE == _RTD2547D)
    4,  _NON_AUTOINC,   _DISP_ACCESS_PORT_2A,           _DISP_OSD_REFERENCE_DEN_21,
    4,  _NON_AUTOINC,   _DISP_DATA_PORT_2B,             0x02,
#else
    4,  _NON_AUTOINC,   _OSD_REFERENCE_DEN_1E,          0x02,
#endif

    _END
};

#if(_SCALER_TYPE == _RTD2547D)

BYTE code tSCALER_POWERUP_HDMI[] =
{
	4,  	_NON_AUTOINC,   	_PAGE_SELECT_A0,                	_PAGE2,
	11, 	_AUTOINC,       	_P2_TMDS_OUTPUT_CTRL_A6,        	0x80,0x70,0x03,0x00,0x70,0x70,0xe3,0x24,

    _END
};

BYTE code tSCALER_POWERUP_DVI[] =
{
	4,  	_NON_AUTOINC,   	_PAGE_SELECT_A0,                	_PAGE2,
	11, 	_AUTOINC,       	_P2_TMDS_OUTPUT_CTRL_A6,        	0x80,0x10,0x03,0x00,0x70,0x70,0xe3,0x24,

    _END
};

#endif // #if(_SCALER_TYPE == _RTD2547D)


//----------------------------------------------------------------------------------------------------
// Filter Coefficient Table (Sharpness)
//----------------------------------------------------------------------------------------------------
BYTE code tSU_COEF_0[] = 
{
    0x04,0x00,0x03,0x00,0x02,0x00,0x00,0x00,0xFE,0x0F,0xFA,0x0F,0xF6,0x0F,0xF2,0x0F,
    0xEC,0x0F,0xE6,0x0F,0xE0,0x0F,0xD9,0x0F,0xD2,0x0F,0xCA,0x0F,0xC3,0x0F,0xBB,0x0F,
    0xCA,0x0F,0xE0,0x0F,0xF7,0x0F,0x13,0x00,0x31,0x00,0x54,0x00,0x78,0x00,0xA1,0x00,
    0xCB,0x00,0xFA,0x00,0x28,0x01,0x5B,0x01,0x8D,0x01,0xC3,0x01,0xF7,0x01,0x2E,0x02,
    0x79,0x04,0x72,0x04,0x68,0x04,0x55,0x04,0x40,0x04,0x25,0x04,0x07,0x04,0xE2,0x03,
    0xBD,0x03,0x91,0x03,0x65,0x03,0x34,0x03,0x03,0x03,0xCE,0x02,0x99,0x02,0x63,0x02,
    0xB9,0x0F,0xAB,0x0F,0x9F,0x0F,0x98,0x0F,0x91,0x0F,0x8D,0x0F,0x8B,0x0F,0x8B,0x0F,
    0x8C,0x0F,0x8F,0x0F,0x93,0x0F,0x98,0x0F,0x9E,0x0F,0xA5,0x0F,0xAD,0x0F,0xB4,0x0F,
};

BYTE code tSU_COEF_1[] = 
{
    0xF9,0x0F,0xF9,0x0F,0xF8,0x0F,0xF5,0x0F,0xF3,0x0F,0xF0,0x0F,0xEC,0x0F,0xE8,0x0F,
    0xE2,0x0F,0xDD,0x0F,0xD7,0x0F,0xD1,0x0F,0xCA,0x0F,0xC4,0x0F,0xBE,0x0F,0xB7,0x0F,
    0xF6,0x0F,0x0E,0x00,0x27,0x00,0x45,0x00,0x63,0x00,0x85,0x00,0xA7,0x00,0xCE,0x00,
    0xF6,0x00,0x20,0x01,0x4A,0x01,0x79,0x01,0xA6,0x01,0xD6,0x01,0x04,0x02,0x35,0x02,
    0x2F,0x04,0x28,0x04,0x1F,0x04,0x10,0x04,0xFE,0x03,0xE7,0x03,0xCE,0x03,0xAF,0x03,
    0x8F,0x03,0x69,0x03,0x44,0x03,0x19,0x03,0xEF,0x02,0xC1,0x02,0x93,0x02,0x63,0x02,
    0xE2,0x0F,0xD1,0x0F,0xC2,0x0F,0xB6,0x0F,0xAC,0x0F,0xA4,0x0F,0x9F,0x0F,0x9B,0x0F,
    0x99,0x0F,0x9A,0x0F,0x9B,0x0F,0x9D,0x0F,0xA1,0x0F,0xA5,0x0F,0xAB,0x0F,0xB1,0x0F,
};

BYTE code tSU_COEF_2[] = 
{
    0xED,0x0F,0xED,0x0F,0xEB,0x0F,0xE9,0x0F,0xE6,0x0F,0xE3,0x0F,0xDF,0x0F,0xDB,0x0F,
    0xD7,0x0F,0xD2,0x0F,0xCC,0x0F,0xC8,0x0F,0xC3,0x0F,0xBE,0x0F,0xB9,0x0F,0xB5,0x0F,
    0x25,0x00,0x42,0x00,0x5C,0x00,0x7D,0x00,0x9B,0x00,0xBD,0x00,0xDE,0x00,0x03,0x01,
    0x27,0x01,0x4E,0x01,0x74,0x01,0x9B,0x01,0xC2,0x01,0xEB,0x01,0x11,0x02,0x3A,0x02,
    0xDC,0x03,0xCA,0x03,0xC4,0x03,0xB6,0x03,0xA8,0x03,0x94,0x03,0x81,0x03,0x68,0x03,
    0x4E,0x03,0x31,0x03,0x13,0x03,0xF1,0x02,0xD0,0x02,0xAB,0x02,0x88,0x02,0x60,0x02,
    0x12,0x00,0x07,0x00,0xF5,0x0F,0xE4,0x0F,0xD7,0x0F,0xCC,0x0F,0xC2,0x0F,0xBA,0x0F,
    0xB4,0x0F,0xAF,0x0F,0xAD,0x0F,0xAC,0x0F,0xAB,0x0F,0xAC,0x0F,0xAE,0x0F,0xB1,0x0F,
};

BYTE code tSU_COEF_3[] = 
{
    0xE0,0x0F,0xE9,0x0F,0xE7,0x0F,0xE7,0x0F,0xE3,0x0F,0xE2,0x0F,0xDE,0x0F,0xDB,0x0F,
    0xD7,0x0F,0xD3,0x0F,0xCF,0x0F,0xCC,0x0F,0xC9,0x0F,0xC6,0x0F,0xC4,0x0F,0xC3,0x0F,
    0x5D,0x00,0x74,0x00,0x8D,0x00,0xAA,0x00,0xC6,0x00,0xE5,0x00,0x04,0x01,0x24,0x01,
    0x44,0x01,0x67,0x01,0x86,0x01,0xA9,0x01,0xCA,0x01,0xED,0x01,0x0D,0x02,0x2E,0x02,
    0x7A,0x03,0x6C,0x03,0x67,0x03,0x5A,0x03,0x50,0x03,0x40,0x03,0x31,0x03,0x1E,0x03,
    0x0B,0x03,0xF3,0x02,0xDD,0x02,0xC2,0x02,0xA7,0x02,0x8A,0x02,0x6D,0x02,0x4D,0x02,
    0x49,0x00,0x37,0x00,0x25,0x00,0x15,0x00,0x07,0x00,0xF9,0x0F,0xED,0x0F,0xE3,0x0F,
    0xDA,0x0F,0xD3,0x0F,0xCE,0x0F,0xC9,0x0F,0xC6,0x0F,0xC3,0x0F,0xC2,0x0F,0xC2,0x0F,
};

BYTE code tSU_COEF_4[] = 
{
    0xD6,0x0F,0xE1,0x0F,0xE0,0x0F,0xE1,0x0F,0xE0,0x0F,0xE0,0x0F,0xDD,0x0F,0xDC,0x0F,
    0xDB,0x0F,0xD9,0x0F,0xD7,0x0F,0xD7,0x0F,0xD5,0x0F,0xD6,0x0F,0xD5,0x0F,0xD7,0x0F,
    0x7F,0x00,0x94,0x00,0xAB,0x00,0xC5,0x00,0xDE,0x00,0xF9,0x00,0x14,0x01,0x32,0x01,
    0x4E,0x01,0x6C,0x01,0x88,0x01,0xA7,0x01,0xC4,0x01,0xE2,0x01,0xFE,0x01,0x1B,0x02,
    0x40,0x03,0x31,0x03,0x2C,0x03,0x1F,0x03,0x17,0x03,0x09,0x03,0xFC,0x02,0xEB,0x02,
    0xDA,0x02,0xC6,0x02,0xB3,0x02,0x9B,0x02,0x85,0x02,0x6B,0x02,0x52,0x02,0x36,0x02,
    0x6B,0x00,0x5A,0x00,0x49,0x00,0x3B,0x00,0x2B,0x00,0x1E,0x00,0x13,0x00,0x07,0x00,
    0xFD,0x0F,0xF5,0x0F,0xEE,0x0F,0xE7,0x0F,0xE2,0x0F,0xDD,0x0F,0xDB,0x0F,0xD8,0x0F,
};

code BYTE *tSU_COEF_TABLE[] =
{
    tSU_COEF_0,     tSU_COEF_1,     tSU_COEF_2,     tSU_COEF_3,     tSU_COEF_4,
};

//----------------------------------------------------------------------------------------------------
// Gamma Table
//----------------------------------------------------------------------------------------------------

#if (_SCALER_TYPE == _RTD2547D)

BYTE code tGAMMA_R[] = 
{
    0x04,0x00,0x03,0x0c,0x05,0x08,0x07,0x01,0x0d,0x02,0x09,0x0a,
    0x06,0x0b,0x0f,0x0e,0x6d,0x85,0xb1,0x30,0xb9,0x34,0xfb,0xb0,
    0x8d,0xd8,0xe9,0xd8,0x4b,0xbb,0x36,0x9d,0x86,0x34,0xec,0x18,
    0x76,0x83,0x87,0xda,0x0e,0x9d,0xa0,0xf3,0xb4,0x1c,0x20,0x76,
    0x83,0x8f,0x68,0x38,0x4b,0xb4,0x1c,0x1c,0xd3,0x87,0x0c,0x34,
    0xd0,0x70,0x67,0x68,0x2d,0x9a,0x70,0xb0,0xb1,0xa6,0x82,0xee,
    0xd0,0x59,0x1a,0x70,0xb1,0x0d,0x34,0x16,0x14,0xed,0x05,0x84,
    0x9d,0xa0,0xb3,0x1a,0x70,0xb0,0x5a,0x74,0xda,0x74,0x1c,0xed,
    0x24,0x3b,0x48,0xb7,0x42,0xda,0x41,0x4e,0xe8,0x1d,0xda,0x46,
    0x77,0x40,0xa7,0x7b,0x3b,0xc2,0xce,0xf9,0xd9,0x44,0xef,0x0a,
    0x77,0x83,0xbb,0x28,0x6d,0xe0,0xdb,0x90,0x7d,0xc9,0x6e,0x45,
    0xb9,0x0b,0x72,0x0a,0xdc,0x81,0xf7,0x20,0xdb,0x44,0x0c,0xee,
    0x10,0x1d,0xdc,0x21,0x3b,0x41,0x13,0xb8,0x40,0x41,0xdc,0x20,
    0x66,0x9c,0x20,0x24,0x77,0x08,0x31,0xa7,0x08,0x05,0xda,0x13,
    0x77,0x10,0x5b,0xb8,0xad,0x38,0x88,0xee,0x21,0x1a,0x71,0x05,
    0x0e,0xe2,0x07,0x1a,0x71,0x06,0xdc,0x40,0xd4,0xc8,0x61,0xf7,
    0x1a,0xdc,0x65,0xb2,0x18,0x87,0x71,0x85,0x0c,0x9c,0x60,0xe7,
    0x71,0x86,0x3b,0x20,0xa6,0xec,0x82,0x82,0xf7,0x0a,0xee,0x14,
    0x11,0x26,0x41,0x43,0x3b,0x85,0x04,0x99,0x38,0x50,0x66,0x4e,
    0x14,0x0d,0x27,0x09,0x0e,0x32,0x70,0x94,0x64,0xe1,0x21,0x0c,
    0x99,0x04,0x8c,0x76,0x41,0x21,0x27,0x70,0x93,0x3b,0x20,0x90,
    0x66,0x4e,0x0e,0x1e,0x4e,0x0e,0x87,0x70,0x72,0x1d,0x90,0x38,
    0x8e,0xe0,0xe1,0x46,0x4e,0x0e,0x6d,0x32,0x07,0x05,0x77,0x36,
    0xd3,0x98,0x73,0x4e,0x68,0x69,0xcc,0xa9,0xcc,0x4d,0x39,0x8c,
    0xed,0x18,0x48,0xed,0x19,0xee,0x60,0xb4,0xe1,0x9b,0xb8,0x60,
    0xb7,0x70,0xd7,0x70,0xc1,0x0e,0xe1,0x86,0xd3,0x86,0x0a,0x3b,
    0x86,0x07,0x3b,0x86,0x0c,0x77,0x0c,0x0c,0x77,0x05,0x0e,0x77,
    0x05,0x47,0x70,0x52,0x34,0xe0,0xa2,0x19,0x32,0x05,0x09,0x62,
    0x70,0x53,0x30,0x87,0x05,0x06,0xd8,0x40,0x30,0x73,0x13,0x18,
    0x31,0x0c,0x4c,0x24,0x18,0x28,0xc1,0xd8,0x81,0x81,0x61,0xdb,
    0x06,0x05,0x18,0x5b,0x60,
};

BYTE code tGAMMA_G[] = 
{
    0x04,0x00,0x03,0x0c,0x08,0x05,0x06,0x0a,0x07,0x02,0x01,0x0e,
    0x0d,0x09,0x0b,0x0f,0x6d,0x85,0x30,0xcc,0x2d,0xdd,0xda,0x69,
    0x8c,0xae,0xc3,0x12,0x76,0x0f,0x4e,0xc1,0x9d,0xa6,0x66,0x9d,
    0x84,0x92,0x70,0xa7,0x4e,0x14,0x16,0xd3,0x85,0x23,0x4d,0x05,
    0x0f,0x68,0x28,0x33,0x4e,0x14,0x46,0x9a,0x0a,0x0f,0x4e,0x14,
    0x6d,0x34,0x14,0x10,0x49,0xa0,0xa0,0x57,0x68,0x2d,0x9a,0x68,
    0x2c,0x2f,0x68,0x2e,0xd3,0x41,0x63,0x24,0xe1,0x61,0xa9,0xa0,
    0xb2,0x34,0xe1,0x61,0xc9,0x34,0x16,0x6d,0x38,0x58,0x41,0xa6,
    0x82,0xc1,0x69,0xd0,0x53,0x4d,0x20,0xb2,0xb4,0xb4,0xe8,0x4e,
    0xd2,0x0c,0x76,0x90,0x39,0x5a,0x40,0xdb,0x48,0x21,0xdd,0x02,
    0xb4,0xf6,0x77,0x85,0x9d,0xf3,0xbc,0x47,0x79,0x1d,0xe1,0xce,
    0xf3,0x3b,0x50,0x92,0xb8,0xd9,0x5c,0x61,0x65,0x71,0xca,0xd0,
    0xc5,0xb8,0xcb,0x71,0x87,0xa7,0x19,0xbb,0x8c,0x25,0xa7,0x18,
    0x29,0xa7,0x10,0x51,0x5a,0x12,0xdc,0x43,0xa7,0x10,0x67,0x68,
    0x44,0x76,0x84,0x1c,0xae,0x23,0x24,0xd0,0x82,0x5d,0xc3,0x36,
    0x9c,0x30,0x51,0xda,0x0c,0x8a,0xd0,0x61,0xee,0x18,0x35,0x38,
    0x60,0x77,0x68,0x30,0x73,0xb4,0x18,0xca,0xe1,0x82,0x49,0x39,
    0x3d,0xc8,0x2f,0x72,0xee,0x42,0xd8,0xc8,0x8a,0xe4,0x1c,0xae,
    0x46,0x57,0x20,0x92,0xb1,0x83,0xb3,0xb8,0x38,0x59,0xdc,0x1e,
    0x77,0x07,0x11,0x8d,0xc1,0xc1,0xd8,0xdc,0x1c,0x1b,0x70,0x70,
    0x88,0xda,0x07,0x05,0x8d,0x8c,0x38,0x51,0xa7,0x0e,0x8a,0xe1,
    0xc6,0x43,0x63,0x0e,0x4e,0xc6,0x1c,0x3e,0xc6,0x1c,0xc9,0x31,
    0x87,0x09,0x21,0xb8,0x33,0x3b,0x18,0x32,0x77,0x06,0x1b,0xb8,
    0x30,0x66,0x37,0x06,0x07,0xdc,0x18,0x1b,0x70,0x60,0x88,0xda,
    0x06,0x05,0xdc,0xc2,0xa9,0xcd,0x34,0xe7,0x34,0xe6,0x22,0xb4,
    0x65,0xb9,0x87,0xa7,0x33,0x77,0x30,0x97,0x70,0x86,0xd3,0x84,
    0x05,0x18,0xdc,0x22,0xee,0x10,0x27,0x63,0x08,0x2d,0xc2,0x03,
    0xee,0x10,0x71,0xb8,0x40,0x49,0x0d,0xc2,0x59,0xd8,0xc2,0x53,
    0xb1,0x84,0x8e,0x37,0x09,0x0c,0x42,0x62,0x09,0x0e,0x41,0x98,
    0x82,0x42,0x0c,0x4c,0x40,0xac,0xc9,0x87,0x05,0x1c,0x1d,0x82,
    0x82,0x83,0x41,0x5b,
};

BYTE code tGAMMA_B[] = 
{
    0x00,0x03,0x04,0x02,0x0c,0x05,0x08,0x06,0x07,0x01,0x0a,0x0b,
    0x09,0x0d,0x0e,0x0f,0xfb,0xc8,0x75,0x77,0x3a,0x47,0x38,0xd3,
    0xb8,0x72,0x3b,0x8a,0x77,0x08,0x47,0x70,0xa1,0x1d,0xc2,0x49,
    0xce,0x0f,0x3b,0x83,0x27,0x38,0x28,0x9c,0xc2,0xe4,0xe6,0x16,
    0x77,0x30,0xb6,0x9c,0xc2,0xd0,0x8e,0xc2,0xc6,0x47,0x61,0x61,
    0xa7,0x61,0x62,0x47,0x30,0xb0,0x84,0xe6,0x16,0x14,0x27,0x30,
    0xb0,0x92,0x3b,0x0b,0x07,0x9c,0xc2,0xc1,0xae,0x61,0x60,0xa8,
    0xec,0xe2,0x3b,0x30,0xb2,0x39,0x99,0x93,0x99,0xa9,0xd9,0x8d,
    0x1c,0xcc,0x3a,0x73,0x30,0xc2,0x73,0x31,0x11,0xd9,0x85,0x4e,
    0xcc,0x25,0x1d,0x99,0x08,0xec,0xc1,0xc8,0xe6,0x60,0xc4,0xed,
    0xd1,0xdb,0x0b,0x11,0xdb,0x32,0x3b,0x6a,0xe6,0xc6,0x9d,0xb0,
    0xe4,0x76,0xc5,0x73,0x61,0x09,0xdb,0x0a,0x23,0xb6,0x57,0x6c,
    0x1c,0x4e,0x6c,0x18,0x9d,0xaa,0x76,0x82,0xc9,0xda,0x69,0xda,
    0x44,0xed,0x07,0x4e,0xd0,0x62,0x56,0x82,0x04,0xed,0x04,0xdd,
    0xa2,0x13,0xb4,0x0d,0x76,0x81,0x44,0xac,0x61,0x69,0xd8,0xcc,
    0x9d,0x8d,0x27,0x63,0x19,0x3b,0x18,0x64,0xec,0x62,0x27,0x63,
    0x0a,0x4e,0xc6,0x12,0x4e,0xc6,0x0e,0x9d,0x8c,0x18,0x9d,0x87,
    0xa7,0x61,0xc2,0xc9,0xd8,0x76,0x9d,0x87,0x44,0xec,0x38,0x74,
    0xec,0x38,0x62,0x76,0x1c,0x21,0x3b,0x0e,0x14,0x4e,0xc3,0x92,
    0x76,0x1c,0x1c,0x9d,0x87,0x05,0x4e,0xc3,0x49,0x58,0x63,0x13,
    0xb0,0xca,0xec,0x30,0xc4,0xec,0x30,0x6b,0xa0,0xc2,0x27,0x61,
    0x82,0x93,0xb0,0xc1,0x24,0xac,0x30,0x38,0x94,0xc3,0x02,0xdd,
    0x0a,0x4a,0xc4,0x62,0x54,0x24,0x27,0x42,0x0e,0x95,0x08,0x49,
    0x50,0x82,0x93,0xa1,0x15,0x50,0x81,0xaa,0x82,0x35,0x41,0x07,
    0x54,0x10,0xaa,0x82,0x03,0xc7,0x41,0x02,0x4a,0x30,0x80,0xa1,
    0x2a,0x08,0x21,0x0e,0x82,0x01,0x88,0x74,0x14,0x17,0x1c,0x61,
    0x4c,0x43,0x8c,0x28,0x3c,0x71,0x85,0x08,0x43,0x8c,0x28,0x26,
    0x38,0xc2,0x81,0xc4,0x38,0xc2,0x71,0xc6,0x12,0x62,0x1c,0x61,
    0x23,0x8e,0x30,0x90,0xc2,0x0f,0x18,0x48,0x52,0x1c,0x61,0x24,
    0x41,0xe1,0xc2,0x41,0x48,0x74,0x47,0x1c,0x39,0x22,0x1c,0x39,
    0x06,0x10,0xe1,0x88,0x28,0x41,0xe1,0x88,0x1c,0x83,0x44,0x0e,
    0x16,0x10,0x0b,0x80,
};

#else

BYTE code tGAMMA_COMPACT1[] = 
{
    0x00,0x04,0x02,0x04,0x04,0x04,0x06,0x04,0x08,0x04,0x0A,0x04,0x0C,0x04,0x0E,0x04,
    0x10,0x04,0x12,0x04,0x14,0x04,0x16,0x04,0x18,0x04,0x1A,0x04,0x1C,0x04,0x1E,0x04,
    0x20,0x04,0x22,0x04,0x24,0x04,0x26,0x04,0x28,0x04,0x2A,0x04,0x2C,0x04,0x2E,0x04,
    0x30,0x04,0x32,0x04,0x34,0x04,0x36,0x04,0x38,0x04,0x3A,0x04,0x3C,0x04,0x3E,0x04,
    0x40,0x04,0x42,0x04,0x44,0x04,0x46,0x04,0x48,0x04,0x4A,0x04,0x4C,0x04,0x4E,0x04,
    0x50,0x04,0x52,0x04,0x54,0x04,0x56,0x04,0x58,0x04,0x5A,0x04,0x5C,0x04,0x5E,0x04,
    0x60,0x04,0x62,0x04,0x64,0x04,0x66,0x04,0x68,0x04,0x6A,0x04,0x6C,0x04,0x6E,0x04,
    0x70,0x04,0x72,0x04,0x74,0x04,0x76,0x04,0x78,0x04,0x7A,0x04,0x7C,0x04,0x7E,0x04,
    0x80,0x04,0x82,0x04,0x84,0x04,0x86,0x04,0x88,0x04,0x8A,0x04,0x8C,0x04,0x8E,0x04,
    0x90,0x04,0x92,0x04,0x94,0x04,0x96,0x04,0x98,0x04,0x9A,0x04,0x9C,0x04,0x9E,0x04,
    0xA0,0x04,0xA2,0x04,0xA4,0x04,0xA6,0x04,0xA8,0x04,0xAA,0x04,0xAC,0x04,0xAE,0x04,
    0xB0,0x04,0xB2,0x04,0xB4,0x04,0xB6,0x04,0xB8,0x04,0xBA,0x04,0xBC,0x04,0xBE,0x04,
    0xC0,0x04,0xC2,0x04,0xC4,0x04,0xC6,0x04,0xC8,0x04,0xCA,0x04,0xCC,0x04,0xCE,0x04,
    0xD0,0x04,0xD2,0x04,0xD4,0x04,0xD6,0x04,0xD8,0x04,0xDA,0x04,0xDC,0x04,0xDE,0x04,
    0xE0,0x04,0xE2,0x04,0xE4,0x04,0xE6,0x04,0xE8,0x04,0xEA,0x04,0xEC,0x04,0xEE,0x04,
    0xF0,0x04,0xF2,0x04,0xF4,0x04,0xF6,0x04,0xF8,0x04,0xFA,0x04,0xFC,0x04,0xFE,0x04,
    
};
/*
BYTE code tGAMMA_COMPACT1[] = 
{
	0x04,0x00,0x0e,0x02,0x06,0x08,0x0a,0x0c,0x0f,0x01,0x03,0x05,
	0x07,0x09,0x0b,0x0d,0x6d,0xd9,0xbb,0xbb,0x27,0x63,0x76,0x27,
	0x61,0xdd,0xa7,0x0b,0x6e,0x16,0x6e,0x17,0x70,0xb2,0x70,0xb1,
	0xb8,0x58,0x9c,0x2c,0x3b,0x85,0xa7,0x36,0xe6,0x6e,0x77,0x32,
	0x73,0x1b,0x98,0x9c,0xc3,0xb9,0xa7,0x0a,0x6e,0x14,0x6e,0x15,
	0x70,0xa2,0x70,0xa1,0xb8,0x50,0x9c,0x28,0x3b,0x85,0x27,0xb7,
	0x9b,0xef,0x27,0x8d,0xe2,0x78,0x77,0xa7,0x09,0x6e,0x12,0x6e,
	0x13,0x70,0x92,0x70,0x91,0xb8,0x48,0x9c,0x24,0x3b,0x84,0xa7,
	0x26,0xe4,0x6e,0x57,0x22,0x72,0x1b,0x90,0x9c,0x83,0xb9,0x27,
	0x08,0x6e,0x10,0x6e,0x11,0x70,0x82,0x70,0x81,0xb8,0x40,0x9c,
	0x20,0x3b,0x84,0x27,0x1b,0x71,0x9b,0x8e,0xe3,0x27,0x18,0xdc,
	0x62,0x71,0x87,0x71,0xa7,0x07,0x6e,0x0e,0x6e,0x0f,0x70,0x72,
	0x70,0x71,0xb8,0x38,0x9c,0x1c,0x3b,0x83,0xa7,0x13,0x71,0x1b,
	0x8a,0xe2,0x27,0x10,0xdc,0x42,0x71,0x07,0x71,0x27,0x06,0x6e,
	0x0c,0x6e,0x0d,0x70,0x62,0x70,0x61,0xb8,0x30,0x9c,0x18,0x3b,
	0x83,0x27,0x0e,0xdc,0x39,0xb8,0x7b,0x87,0x27,0x0e,0x37,0x0e,
	0x27,0x0e,0x1d,0xc3,0xa7,0x05,0x6e,0x0a,0x6e,0x0b,0x70,0x52,
	0x70,0x51,0xb8,0x28,0x9c,0x14,0x3b,0x82,0xa7,0x4d,0xd1,0xba,
	0xba,0x27,0x43,0x74,0x27,0x41,0xdd,0x27,0x0c,0xdc,0x31,0xb8,
	0x6b,0x86,0x27,0x0c,0x37,0x0c,0x27,0x0c,0x1d,0xc3,0x27,
};
*/
#endif

//----------------------------------------------------------------------------------------------------
// Dithering Table
//----------------------------------------------------------------------------------------------------
BYTE code tDITHER_SEQ_TABLE_0[] = 
{
    0xe4,0xa2,0x05,0x37,0xf6,0x31,0x69,0xcb,0x1f,0xd2,0xb0,0xe6,
    0x45,0x1b,0x87,0xc6,0x9e,0xb4,0xc6,0x38,0xd4,0xdb,0x12,0x1b,
};

BYTE code tDITHER_TABLE_10_TO_8[] = 
{
    // 10 --> 8
    0x01,0x32,0x12,0x03,0x23,0x10,0x30,0x21,
    0x23,0x10,0x30,0x21,0x01,0x32,0x12,0x03,
    0x30,0x21,0x01,0x32,0x12,0x03,0x23,0x10,
};

BYTE code tDITHER_TABLE_10_TO_6[] = 
{
    // 10 --> 6
    0x07,0xf8,0x69,0x1e,0xad,0x52,0xc3,0xb4,
    0xad,0x52,0xc3,0xb4,0x07,0xf8,0x69,0x1e,
    0xad,0x52,0x69,0x1e,0xc3,0xb4,0x07,0xf8,
};

BYTE code tDCLK_OFFSET[16] =
{
    0,   0,  0,  0,
    0,   0,  0,  0,
    0,   0,  0,  0,
    0,   0,  0,  0,
};

#if (_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2546N || _SCALER_TYPE == _RTD2525L)

//----------------------------------------------------------------------------------------------------
// DCC Table
//----------------------------------------------------------------------------------------------------

BYTE code tDCC_CONTROL0[] = //V307 modify
{ 
    0x86,  0x66,  0xc3,  
    0xb4,  0xce,  0x1e,  
    0x10,  0x0c,  0x18,
};

BYTE code tDCC_CONTROL1[] = //V307 modify
{ 
    0x86,  0x66,  0xc3,  
    0xb4,  0xce,  0x1e,  
    0x10,  0x0c,  0x18,
};

BYTE code tDCC_CONTROL2[] = //V307 modify
{ 
    0x86,  0x66,  0xc3,  
    0xb4,  0xce,  0x1e,  
    0x10,  0x0c,  0x18,
};

BYTE code tDCC_CONTROL3[] = //V307 modify
{ 
    0x86,  0x66,  0xc3,  
    0xb4,  0xce,  0x1e,  
    0x10,  0x0c,  0x18, 
};
 
BYTE code tDCC_USERCURVE0[] =
{
    0x04,  0x0c,  0x1a,  0x2b,  
    0x41,  0x57,  0x6d,  0x80,  
    0x95,  0xa9,  0xbd,  0xd0,  
    0xe2,  0xf2,  0xfc,  0x10,  0x00,
    0x80,  0x14,  0x34,
};
 
BYTE code tDCC_USERCURVE1[] =
{ 
    0x0e,  0x1d,  0x2d,  0x3d,  
    0x4d,  0x5d,  0x6d,  0x7d,  
    0x8e,  0x9d,  0xad,  0xbc,  
    0xca,  0xdb,  0xeb,  0x10,  0x00,
    0x41,  0x14,  0x34,
};

BYTE code tDCC_USERCURVE2[] =
{ 
    0x0f,  0x1d,  0x2d,  0x3e,  
    0x4b,  0x5c,  0x6d,  0x80,  
    0x91,  0xa2,  0xb3,  0xc4,  
    0xd4,  0xe3,  0xf2,  0x10,  0x00,
    0x5d,  0x14,  0x30,
};
 
BYTE code tDCC_USERCURVE3[] =
{ 
    0x18,  0x2c,  0x3f,  0x50,  
    0x61,  0x73,  0x85,  0x99,  
    0xad,  0xc0,  0xd2,  0xe0,  
    0xeb,  0xf5,  0xfc,  0x10,  0x00,
    0x64,  0x14,  0x3a,
};

code BYTE *tDCC_CONTROL[] =
{
    tDCC_CONTROL2, tDCC_CONTROL1, tDCC_CONTROL3, tDCC_CONTROL0
};

code BYTE  *tDCC_USERCURVE[] =
{
    tDCC_USERCURVE2, tDCC_USERCURVE1, tDCC_USERCURVE3, tDCC_USERCURVE0
};

//*************** Six Axes Color ***************//

BYTE code tICM_MOVIE0[] =
{
    0x0c,  0x00,  0xfc,
    0x00,  0xd6,  0x00,  0xba,  0x00,  0xac,  0x00,  0xac,  
    0x00,  0xba,  0x00,  0xce,  0x00,  0xe7,  0x00,  0x00,  
    0xcf,  0xcf,  0xad,  0xad,  0x9d,  0x9d,  0x9e,  0x9e,  
    0xad,  0xad,  0xc5,  0xc5,  0xe3,  0xe3,  0x00,  0x00,  
    0x1c,  0xe4,  0x2f,  0xd1,  0x38,  0xc8,  0x38,  0xc8,  
    0x2f,  0xd1,  0x21,  0xdf,  0x10,  0xf0,  0x00,  0x00,  
};
 
BYTE code tICM_MOVIE1[] =
{
    0x08,  0x00,  0xcc,
    0xb6,  0x00,  0x84,  0x00,  0x80,  0x00,  0x80,  0x00,  
    0x84,  0x00,  0xa7,  0x00,  0xd4,  0x00,  0x00,  0x00,  
    0xcf,  0x31,  0xad,  0x53,  0x9d,  0x63,  0x9e,  0x62,  
    0xad,  0x53,  0xc5,  0x3b,  0xe3,  0x1d,  0x00,  0x00,  
    0xcf,  0xcf,  0xad,  0xad,  0x9d,  0x9d,  0x9e,  0x9e,  
    0xad,  0xad,  0xc5,  0xc5,  0xe3,  0xe3,  0x00,  0x00,  
};
 
BYTE code tICM_MOVIE2[] =
{
    0x05,  0x00,  0x86,
    0xe2,  0x4a,  0xcd,  0x7c,  0xc3,  0x7f,  0xc3,  0x7f,  
    0xcd,  0x7c,  0xdb,  0x59,  0xee,  0x2c,  0x00,  0x00,  
    0xfb,  0x25,  0xf8,  0x3e,  0xf8,  0x4b,  0xfa,  0x4b,  
    0xfe,  0x3e,  0x02,  0x2d,  0x07,  0x16,  0x0d,  0x00,  
    0xcf,  0x31,  0xad,  0x53,  0x9d,  0x63,  0x9e,  0x62,  
    0xad,  0x53,  0xc5,  0x3b,  0xe3,  0x1d,  0x00,  0x00,  
};
 
BYTE code tICM_MOVIE3[] =
{
    0x03,  0x00,  0x6f,
    0x10,  0x29,  0x1c,  0x44,  0x21,  0x52,  0x22,  0x52,  
    0x1c,  0x44,  0x14,  0x31,  0x0a,  0x18,  0x00,  0x00,  
    0x22,  0x0e,  0x38,  0x17,  0x44,  0x1c,  0x44,  0x1c,  
    0x38,  0x17,  0x29,  0x11,  0x14,  0x08,  0x00,  0x00,  
    0x00,  0x20,  0x00,  0x36,  0xfd,  0x41,  0xf9,  0x41,  
    0xf3,  0x36,  0xed,  0x27,  0xe6,  0x13,  0xdf,  0x00,  
};

BYTE code tICM_GAME0[] =
{
    0x0c,  0x00,  0xfc,
    0x00,  0xe5,  0x00,  0xd3,  0x00,  0xc9,  0x00,  0xc9,  
    0x00,  0xd3,  0x00,  0xdf,  0x00,  0xf0,  0x00,  0x00,  
    0xe5,  0xe5,  0xd2,  0xd2,  0xc9,  0xc9,  0xca,  0xca,  
    0xd2,  0xd2,  0xdf,  0xdf,  0xf0,  0xf0,  0x00,  0x00,  
    0x12,  0xee,  0x1f,  0xe1,  0x25,  0xdb,  0x25,  0xdb,  
    0x1f,  0xe1,  0x16,  0xea,  0x0a,  0xf6,  0x00,  0x00,  
};
 
BYTE code tICM_GAME1[] =
{
    0x08,  0x00,  0xcc,
    0xd7,  0x00,  0xbc,  0x00,  0xae,  0x00,  0xae,  0x00,  
    0xbc,  0x00,  0xcf,  0x00,  0xe8,  0x00,  0x00,  0x00,  
    0xe5,  0x1b,  0xd2,  0x2e,  0xc9,  0x37,  0xca,  0x36,  
    0xd2,  0x2e,  0xdf,  0x21,  0xf0,  0x10,  0x00,  0x00,  
    0xe5,  0xe5,  0xd2,  0xd2,  0xc9,  0xc9,  0xca,  0xca,  
    0xd2,  0xd2,  0xdf,  0xdf,  0xf0,  0xf0,  0x00,  0x00,  
};
 
BYTE code tICM_GAME2[] =
{
    0x05,  0x00,  0x86,
    0xf0,  0x29,  0xe4,  0x44,  0xdf,  0x52,  0xde,  0x52,  
    0xe4,  0x44,  0xec,  0x31,  0xf6,  0x18,  0x00,  0x00,  
    0xfe,  0x19,  0xfc,  0x29,  0xfc,  0x32,  0xfe,  0x32,  
    0x01,  0x29,  0x04,  0x1e,  0x09,  0x0f,  0x0d,  0x00,  
    0xe5,  0x1b,  0xd2,  0x2e,  0xc9,  0x37,  0xca,  0x36,  
    0xd2,  0x2e,  0xdf,  0x21,  0xf0,  0x10,  0x00,  0x00,  
};
 
BYTE code tICM_GAME3[] =
{
    0x03,  0x00,  0x6f,
    0x07,  0x12,  0x0d,  0x1f,  0x0f,  0x25,  0x0f,  0x25,  
    0x0c,  0x1f,  0x09,  0x16,  0x04,  0x0b,  0x00,  0x00,  
    0x0f,  0x06,  0x1a,  0x0b,  0x1f,  0x0d,  0x1f,  0x0d,  
    0x1a,  0x0a,  0x12,  0x07,  0x09,  0x04,  0x00,  0x00,  
    0xfe,  0x12,  0xfd,  0x1f,  0xf9,  0x25,  0xf5,  0x25,  
    0xf0,  0x1f,  0xeb,  0x16,  0xe5,  0x0b,  0xdf,  0x00,  
};

BYTE code tICM_PHOTO0[] =
{
    0x0c,  0x2d,  0xf6,
    0x06,  0xb5,  0x05,  0xb5,  0x06,  0xa6,  0x06,  0xa6,  
    0x04,  0xc4,  0x02,  0xe2,  0x01,  0xea,  0x00,  0x00,  
    0xf6,  0xb5,  0xf6,  0xb5,  0xf5,  0xa6,  0xf5,  0xa6,  
    0xf8,  0xc4,  0xfc,  0xe2,  0xfd,  0xea,  0x00,  0x00,  
    0x34,  0xd3,  0x34,  0xd3,  0x3e,  0xc9,  0x3f,  0xc9,  
    0x2a,  0xdb,  0x14,  0xee,  0x0f,  0xf3,  0x00,  0x00,    
};
 
BYTE code tICM_PHOTO1[] =
{
    0x08,  0x3f,  0xaa,
    0xa2,  0xf7,  0xa1,  0xf7,  0x8e,  0xf5,  0x8e,  0xf5,  
    0xb4,  0xf9,  0xdb,  0xfd,  0xe4,  0xfd,  0x00,  0x00,  
    0xa9,  0x17,  0xa8,  0x15,  0x96,  0x19,  0x95,  0x18,  
    0xb8,  0x0d,  0xda,  0x01,  0xe2,  0xfe,  0xfa,  0xf6,  
    0xb2,  0xd6,  0xb2,  0xd7,  0xa2,  0xce,  0xa2,  0xce,  
    0xc2,  0xdf,  0xe1,  0xef,  0xe9,  0xf3,  0x00,  0x00,  
};
 
BYTE code tICM_PHOTO2[] =
{
    0x03,  0x77,  0x66,
    0x0c,  0x39,  0x0c,  0x39,  0x0f,  0x45,  0x0e,  0x45,  
    0x0a,  0x2e,  0x05,  0x17,  0x03,  0x11,  0x00,  0x00,  
    0x10,  0x27,  0x11,  0x27,  0x13,  0x2e,  0x14,  0x2e,  
    0x0d,  0x1f,  0x07,  0x0f,  0x05,  0x0b,  0x00,  0x00,  
    0x00,  0x27,  0x00,  0x27,  0x00,  0x2e,  0x00,  0x2e,  
    0x01,  0x1f,  0x01,  0x0f,  0x00,  0x0b,  0x00,  0x00,  
};
 
BYTE code tICM_PHOTO3[] =
{
    0x0d,  0xdd,  0x55,
    0x20,  0xdd,  0x20,  0xdd,  0x26,  0xd5,  0x26,  0xd6,  
    0x19,  0xe4,  0x0c,  0xf3,  0x09,  0xf6,  0x00,  0x00,  
    0x1a,  0xd4,  0x1b,  0xd3,  0x20,  0xca,  0x20,  0xca,  
    0x15,  0xdd,  0x0b,  0xee,  0x08,  0xf3,  0x00,  0x00,  
    0x23,  0xe5,  0x24,  0xe6,  0x2b,  0xe0,  0x2b,  0xdf,  
    0x1c,  0xea,  0x0e,  0xf5,  0x0a,  0xf8,  0x00,  0x00,  
};
 
BYTE code tICM_PHOTO4[] =
{
    0x05,  0x00,  0x11,
    0xe0,  0x4e,  0xe0,  0x4e,  0xda,  0x5d,  0xd9,  0x5d,  
    0xe7,  0x3e,  0xf3,  0x1f,  0xf7,  0x17,  0x00,  0x00,  
    0xed,  0x3e,  0xed,  0x3e,  0xe9,  0x4b,  0xea,  0x4b,  
    0xf1,  0x32,  0xf8,  0x19,  0xfb,  0x12,  0x00,  0x00,  
    0xe0,  0x3c,  0xe0,  0x3c,  0xd9,  0x48,  0xd9,  0x49,  
    0xe6,  0x31,  0xf3,  0x18,  0xf6,  0x11,  0x00,  0x00,  
};

BYTE code tICM_TEXT0[] =
{
    0x02,  0x00,  0xcc,
    0x06,  0x06,  0x0a,  0x0a,  0x0b,  0x0b,  0x0a,  0x0a,  
    0x0a,  0x0a,  0x06,  0x06,  0x04,  0x04,  0x00,  0x00,  
    0x09,  0x00,  0x0e,  0x00,  0x10,  0x00,  0x10,  0x00,  
    0x0e,  0x00,  0x09,  0x00,  0x07,  0x00,  0x00,  0x00,  
    0x00,  0x09,  0x00,  0x0e,  0x00,  0x10,  0x00,  0x10,  
    0x00,  0x0e,  0x00,  0x09,  0x00,  0x07,  0x00,  0x00,  
};
 
BYTE code tICM_TEXT1[] =
{
    0x06,  0x00,  0xcc,
    0xfa,  0x06,  0xf6,  0x0a,  0xf5,  0x0b,  0xf6,  0x0a,  
    0xf6,  0x0a,  0xfa,  0x06,  0xfc,  0x04,  0x00,  0x00,  
    0x00,  0x09,  0x00,  0x0e,  0x00,  0x10,  0x00,  0x10,  
    0x00,  0x0e,  0x00,  0x09,  0x00,  0x07,  0x00,  0x00,  
    0xf7,  0x00,  0xf2,  0x00,  0xf0,  0x00,  0xf0,  0x00,  
    0xf2,  0x00,  0xf7,  0x00,  0xf9,  0x00,  0x00,  0x00,  
};
 
BYTE code tICM_TEXT2[] =
{
    0x0a,  0x00,  0xcc,
    0xfa,  0xfa,  0xf6,  0xf6,  0xf5,  0xf5,  0xf6,  0xf6,  
    0xf6,  0xf6,  0xfa,  0xfa,  0xfc,  0xfc,  0x00,  0x00,  
    0xf7,  0x00,  0xf2,  0x00,  0xf0,  0x00,  0xf0,  0x00,  
    0xf2,  0x00,  0xf7,  0x00,  0xf9,  0x00,  0x00,  0x00,  
    0x00,  0xf7,  0x00,  0xf2,  0x00,  0xf0,  0x00,  0xf0,  
    0x00,  0xf2,  0x00,  0xf7,  0x00,  0xf9,  0x00,  0x00,  
};
 
BYTE code tICM_TEXT3[] =
{
    0x0e,  0x00,  0xcc,
    0x06,  0xfa,  0x0a,  0xf6,  0x0b,  0xf5,  0x0a,  0xf6,  
    0x0a,  0xf6,  0x06,  0xfa,  0x04,  0xfc,  0x00,  0x00,  
    0x00,  0xf7,  0x00,  0xf2,  0x00,  0xf0,  0x00,  0xf0,  
    0x00,  0xf2,  0x00,  0xf7,  0x00,  0xf9,  0x00,  0x00,  
    0x09,  0x00,  0x0e,  0x00,  0x10,  0x00,  0x10,  0x00,  
    0x0e,  0x00,  0x09,  0x00,  0x07,  0x00,  0x00,  0x00,  
};

code BYTE  *tICM_SAC[] =
{
    tICM_TEXT0, tICM_TEXT1, tICM_TEXT2, tICM_TEXT3,
    tICM_PHOTO0, tICM_PHOTO1, tICM_PHOTO2, tICM_PHOTO3,
    tICM_MOVIE0, tICM_MOVIE1, tICM_MOVIE2, tICM_MOVIE3,
    tICM_GAME0, tICM_GAME1, tICM_GAME2, tICM_GAME3
};

code BYTE  *tICM_SAC_PHOTO[] =
{
    tICM_PHOTO0, tICM_PHOTO1, tICM_PHOTO2, tICM_PHOTO3, tICM_PHOTO4
};
#endif


//----------------------------------------------------------------------------------------------------
// HDCP Key Table
//----------------------------------------------------------------------------------------------------
#if(_HDCP_SUPPORT == _ON)

BYTE code tHDCP_KEY_TABLE_0[] = 
{
    0x3a, 0x21, 0x17, 0x06, 0x72, 0x60, 0x3b, 0x6e,     // Key0
    0x0c, 0x58, 0x16, 0x4c, 0x5b, 0x3b, 0x68, 0x4b,     // Key1
    0x2f, 0x7b, 0x5d, 0x64, 0x10, 0x60, 0x71, 0x41,     // Key2
    0x6d, 0x4a, 0x1f, 0x48, 0x35, 0x78, 0x4b, 0x6a,     // Key3
    0x4b, 0x3c, 0x69, 0x2a, 0x20, 0x38, 0x55, 0x1c,     // Key4
    0x10, 0x16, 0x09, 0x5d, 0x0d, 0x07, 0x6e, 0x7a,     // Key5
    0x75, 0x1a, 0x35, 0x55, 0x7b, 0x5c, 0x26, 0x0d,     // Key6
    0x2c, 0x49, 0x1a, 0x1b, 0x3e, 0x55, 0x1f, 0x40,     // Key7
    0x11, 0x24, 0x4b, 0x4a, 0x5d, 0x56, 0x4b, 0x5c,     // Key8
    0x62, 0x70, 0x0b, 0x10, 0x52, 0x3f, 0x2b, 0x4d,     // Key9
    0x5d, 0x06, 0x78, 0x16, 0x72, 0x70, 0x2e, 0x06,     // Key10
    0x3a, 0x2c, 0x60, 0x06, 0x12, 0x6c, 0x32, 0x55,     // Key11
    0x54, 0x62, 0x38, 0x05, 0x13, 0x42, 0x49, 0x40,     // Key12
    0x61, 0x54, 0x28, 0x0c, 0x4a, 0x21, 0x7c, 0x32,     // Key13
    0x4b, 0x74, 0x04, 0x5d, 0x10, 0x69, 0x72, 0x62,     // Key14
    0x5d, 0x77, 0x55, 0x0d, 0x19, 0x79, 0x59, 0x43,     // Key15
    0x0a, 0x5f, 0x0d, 0x50, 0x58, 0x4f, 0x48, 0x42,     // Key16
    0x14, 0x64, 0x65, 0x54, 0x2f, 0x7a, 0x75, 0x04,     // Key17
    0x48, 0x35, 0x00, 0x59, 0x16, 0x0e, 0x2f, 0x4b,     // Key18
    0x4a, 0x7b, 0x04, 0x6c, 0x1a, 0x6d, 0x4b, 0x44,     // Key19
    0x50, 0x11, 0x63, 0x63, 0x47, 0x6e, 0x1a, 0x6b,     // Key20
    0x0f, 0x4c, 0x3e, 0x17, 0x66, 0x0d, 0x3b, 0x3a,     // Key21
    0x47, 0x62, 0x5a, 0x25, 0x3d, 0x0e, 0x1d, 0x55,     // Key22
    0x42, 0x0f, 0x43, 0x60, 0x3e, 0x7e, 0x56, 0x3c,     // Key23
    0x44, 0x4a, 0x44, 0x3b, 0x69, 0x17, 0x1b, 0x47,     // Key24
    0x19, 0x77, 0x2c, 0x7d, 0x72, 0x03, 0x66, 0x53,     // Key25
    0x7f, 0x5a, 0x03, 0x26, 0x17, 0x01, 0x28, 0x5e,     // Key26
    0x09, 0x1d, 0x43, 0x13, 0x35, 0x26, 0x4c, 0x15,     // Key27
    0x1e, 0x7f, 0x4d, 0x6b, 0x4d, 0x52, 0x46, 0x00,     // Key28
    0x3c, 0x38, 0x5c, 0x64, 0x6f, 0x72, 0x78, 0x11,     // Key29
    0x30, 0x65, 0x47, 0x70, 0x7a, 0x3c, 0x38, 0x69,     // Key30
    0x78, 0x26, 0x35, 0x09, 0x37, 0x14, 0x34, 0x57,     // Key31
    0x73, 0x4d, 0x28, 0x28, 0x7e, 0x5a, 0x28, 0x09,     // Key32
    0x08, 0x28, 0x6c, 0x69, 0x42, 0x43, 0x31, 0x15,     // Key33
    0x54, 0x23, 0x60, 0x1c, 0x03, 0x48, 0x7d, 0x48,     // Key34
    0x25, 0x5f, 0x2b, 0x04, 0x6c, 0x42, 0x22, 0x66,     // Key35
    0x11, 0x2a, 0x1a, 0x14, 0x29, 0x68, 0x59, 0x73,     // Key36
    0x76, 0x61, 0x16, 0x00, 0x3e, 0x11, 0x31, 0x20,     // Key37
    0x10, 0x59, 0x13, 0x44, 0x54, 0x32, 0x4f, 0x0e,     // Key38
    0x76, 0x47, 0x13, 0x6f, 0x7e, 0x24, 0x5a, 0x6a,     // Key39

};

BYTE code tHDCP_CTRL[] = 
{
#if (_SCALER_TYPE == _RTD2547D)

    4,  _NON_AUTOINC,   _PAGE_SELECT_A0,                _PAGE2,    
    4,  _NON_AUTOINC,   _P2_HDCP_PORT_CTRL_C2,          0x01,
    5,  _AUTOINC,       _P2_HDCP_ADDR_PORT_C3,          0x00,0xb7,
    5,  _AUTOINC,       _P2_HDCP_ADDR_PORT_C3,          0x01,0x28,
    5,  _AUTOINC,       _P2_HDCP_ADDR_PORT_C3,          0x02,0xa9,
    5,  _AUTOINC,       _P2_HDCP_ADDR_PORT_C3,          0x03,0x51,
    5,  _AUTOINC,       _P2_HDCP_ADDR_PORT_C3,          0x04,0xd6,
    5,  _AUTOINC,       _P2_HDCP_ADDR_PORT_C3,          0x40,0x91,

#else

#if (_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2546N || _SCALER_TYPE == _RTD2525L)
    4,  _AUTOINC,       _HDCP_PORT_CTRL_D7,             0x01,
#endif
    5,  _AUTOINC,       _HDCP_ADDR_PORT_D8,             0x00,0xff,
    5,  _AUTOINC,       _HDCP_ADDR_PORT_D8,             0x01,0x21,
    5,  _AUTOINC,       _HDCP_ADDR_PORT_D8,             0x02,0xaa,
    5,  _AUTOINC,       _HDCP_ADDR_PORT_D8,             0x03,0x27,
    5,  _AUTOINC,       _HDCP_ADDR_PORT_D8,             0x04,0x68,

#endif

    _END
};
          
#endif  //#if(_HDCP_SUPPORT == _ON)
           

#else

extern BYTE code tSCALER_POWERUP_INITIAL[];

extern BYTE code tOSD_POWERUP_INITIAL[];


extern code BYTE *tSU_COEF_TABLE[];

#if (_SCALER_TYPE == _RTD2547D)
extern BYTE code tGAMMA_R[];
extern BYTE code tGAMMA_G[];
extern BYTE code tGAMMA_B[];
extern BYTE code tSCALER_POWERUP_HDMI[];
extern BYTE code tSCALER_POWERUP_DVI[];
#else
extern BYTE code tGAMMA_COMPACT1[];
#endif


extern BYTE code tDITHER_SEQ_TABLE_0[];
extern BYTE code tDITHER_TABLE_10_TO_8[];
extern BYTE code tDITHER_TABLE_10_TO_6[];

extern BYTE code tHDCP_KEY_TABLE_0[];
extern BYTE code tHDCP_CTRL[];
extern BYTE code tDCLK_OFFSET[16];
                             
#if (_SCALER_TYPE == _RTD2553V || _SCALER_TYPE == _RTD2546N || _SCALER_TYPE == _RTD2525L)
extern code BYTE *tDCC_CONTROL[];
extern code BYTE *tDCC_USERCURVE[];
extern code BYTE  *tICM_SAC[]; //Six Axes Color
extern code BYTE  *tICM_SAC_PHOTO[]; //Six Axes Color

#endif

#endif
