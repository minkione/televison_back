//----------------------------------------------------------------------------------------------------
// ID Code      : RTD2528R_Hdmi.h No.0000
// Update Note  : 
//
//----------------------------------------------------------------------------------------------------

//--------------------------------------------------
// Definitions of MCK Frequence
//--------------------------------------------------
#define _AUDIO_128_TIMES        1
#define _AUDIO_256_TIMES        2

#define _AUDIO_MCK_32000        _AUDIO_256_TIMES
#define _AUDIO_MCK_44100        _AUDIO_256_TIMES
#define _AUDIO_MCK_48000        _AUDIO_256_TIMES
#define _AUDIO_MCK_88200        _AUDIO_256_TIMES
#define _AUDIO_MCK_96000        _AUDIO_256_TIMES
#define _AUDIO_MCK_176400       _AUDIO_128_TIMES
#define _AUDIO_MCK_192000       _AUDIO_128_TIMES

//--------------------------------------------------
// Definitions of DAC
//--------------------------------------------------
#define _DAC_DEVICE_ADDR        0x20    //CS4360
#define _DAC_CONTROL_ADDR       0x01


//----------------------------------------------------------------------------------------------------

#ifdef __RTD2547D_HDMI__

#if(_HDMI_SUPPORT == _ON)
//--------------------------------------------------
// Global Hdmi Table
//--------------------------------------------------

BYTE code tHDMI_YPBPR_ITU601[] =
{
    // 9CH
    21, _NON_AUTOINC,   _YUV_RGB_COEF_DATA_9D,          0x04,0x00,0x00,0x00,0x05,0x9b,
                                                        0x04,0x00,0xfe,0xaa,0xfd,0x25,
                                                        0x04,0x00,0x07,0x16,0x00,0x00,
    _END
};

BYTE code tHDMI_YPBPR_ITU709[] =
{
    // 9CH
    21, _NON_AUTOINC,   _YUV_RGB_COEF_DATA_9D,          0x04,0x00,0x00,0x00,0x06,0x4b,
                                                        0x04,0x00,0xff,0x41,0xfe,0x20,
                                                        0x04,0x00,0x07,0x6c,0x00,0x00,
    _END
};

#if(_HDMI_EDID == _ON)
BYTE code tHDMI_EDID_DATA[] =
{                          /*
    4, _NON_AUTOINC,   _DDC_DVI_ENABLE_FD,              0x06,
    4, _NON_AUTOINC,   _DDC_DVI_INDEX_FE,               0x00,
    131, _NON_AUTOINC, _DDC_DVI_ACCESS_PORT_FF,

    0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
    0x4A,0x8B,0xC3,0x76,0xA0,0x1B,0x00,0x00,
    0x33,0x0F,0x01,0x03,0x80,0x2B,0x1B,0x78,
    0xEE,0xCF,0xB5,0xA3,0x55,0x49,0x99,0x25,
    0x10,0x50,0x54,0xA7,0xEF,0x80,0xA9,0x40,
    0x81,0x99,0x81,0x40,0x81,0x4F,0x81,0x80,
    0x71,0x40,0x71,0x4F,0x81,0x8A,0x7C,0x2E,
    0x90,0xA0,0x60,0x1A,0x1E,0x40,0x30,0x20,
    0x36,0x00,0xB1,0x0F,0x11,0x00,0x00,0x1A,
    0xD5,0x09,0x80,0xA0,0x20,0x5E,0x63,0x10,
    0x10,0x60,0x52,0x08,0x78,0x2D,0x11,0x00,
    0x00,0x1A,0x00,0x00,0x00,0xFD,0x00,0x38,
    0x4C,0x1E,0x54,0x11,0x00,0x0A,0x20,0x20,
    0x20,0x20,0x20,0x20,0x00,0x00,0x00,0xFC,
    0x00,0x42,0x65,0x6E,0x51,0x20,0x46,0x50,
    0x32,0x30,0x32,0x57,0x0A,0x20,0x01,0xC5,

    131, _NON_AUTOINC, _DDC_DVI_ACCESS_PORT_FF,         

    0x02,0x03,0x1A,0x72,0x47,0x85,0x02,0x03,
    0x04,0x01,0x06,0x07,0x23,0x09,0x07,0x07,
    0x83,0x01,0x00,0x00,0x65,0x03,0x0C,0x00,
    0x10,0x00,0x01,0x1D,0x00,0x72,0x51,0xD0,
    0x1E,0x20,0x6E,0x28,0x55,0x00,0xB4,0x86,
    0x21,0x00,0x00,0x1E,0xD6,0x09,0x80,0xA0,
    0x20,0xE0,0x2D,0x10,0x10,0x60,0xA2,0x00,
    0x08,0x86,0x21,0x00,0x00,0x18,0x8C,0x0A,
    0xD0,0x8A,0x20,0xE0,0x2D,0x10,0x10,0x3E,
    0x96,0x00,0xB4,0x86,0x21,0x00,0x00,0x18,
    0x8C,0x0A,0xA0,0x14,0x51,0xF0,0x16,0x00,
    0x26,0x7C,0x43,0x00,0x08,0x86,0x21,0x00,
    0x00,0x98,0x8C,0x0A,0xA0,0x14,0x51,0xF0,
    0x16,0x00,0x26,0x7C,0x43,0x00,0xB4,0x86,
    0x21,0x00,0x00,0x98,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,

    4, _NON_AUTOINC,   _DDC_DVI_ENABLE_FD,              0x07, */

    4, _NON_AUTOINC,   _DDC_DVI_ENABLE_FD,              0x06,
    4, _NON_AUTOINC,   _DDC_DVI_INDEX_FE,               0x00,
    131, _NON_AUTOINC, _DDC_DVI_ACCESS_PORT_FF,         
    0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,
    0x2a,0xc3,0x20,0x61,0x01,0x01,0x01,0x01,
    //0x4a,0x8B,0x20,0x61,0x01,0x01,0x01,0x01,
    0x00,0x0e,0x01,0x03,0x80,0x45,0x27,0x78,
    0x2a,0x7c,0x11,0x9e,0x59,0x47,0x9b,0x27,
    0x10,0x50,0x54,0x00,0x00,0x00,0x01,0x01,
    0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
    0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x1d,
    0x80,0x18,0x71,0x1c,0x16,0x20,0x58,0x2c,
    0x25,0x00,0xb4,0x86,0x21,0x00,0x00,0x9e,
    0x8c,0x0a,0xd0,0x8a,0x20,0xe0,0x2d,0x10,
    0x10,0x3e,0x96,0x00,0x08,0x86,0x21,0x00,
    0x00,0x18,0x00,0x00,0x00,0xfc,0x00,0x4c,
    0x54,0x2d,0x33,0x32,0x58,0x35,0x37,0x35,
    0x0a,0x20,0x20,0x20,0x00,0x00,0x00,0xfd,
    0x00,0x3b,0x3d,0x0f,0x2e,0x08,0x00,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x01,0xB2,

    131, _NON_AUTOINC, _DDC_DVI_ACCESS_PORT_FF,         
    0x02,0x03,0x1a,0x72,0x47,0x85,0x02,0x03,
    0x04,0x01,0x06,0x07,0x23,0x09,0x07,0x07,
    0x83,0x01,0x00,0x00,0x65,0x03,0x0c,0x00,
    0x10,0x00,0x01,0x1d,0x00,0x72,0x51,0xd0,
    0x1e,0x20,0x6e,0x28,0x55,0x00,0xb4,0x86,
    0x21,0x00,0x00,0x1e,0xd6,0x09,0x80,0xa0,
    0x20,0xe0,0x2d,0x10,0x10,0x60,0xa2,0x00,
    0x08,0x86,0x21,0x00,0x00,0x18,0x8c,0x0a,
    0xd0,0x8a,0x20,0xe0,0x2d,0x10,0x10,0x3e,
    0x96,0x00,0xb4,0x86,0x21,0x00,0x00,0x18,
    0x8c,0x0a,0xa0,0x14,0x51,0xf0,0x16,0x00,
    0x26,0x7c,0x43,0x00,0x08,0x86,0x21,0x00,
    0x00,0x98,0x8c,0x0a,0xa0,0x14,0x51,0xf0,
    0x16,0x00,0x26,0x7c,0x43,0x00,0xb4,0x86,
    0x21,0x00,0x00,0x98,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,

    4, _NON_AUTOINC,   _DDC_DVI_ENABLE_FD,              0x07,

    _END
};
#endif//End of #if(_HDMI_EDID == _ON)

#endif //End of #if(_HDMI_SUPPORT == _ON)

//--------------------------------------------------
// Global Variables
//--------------------------------------------------
BYTE idata ucHdmiCtrl = 0;
#if(_DAC_SUPPORT == _ON)
BYTE idata ucAudioRate = 0;
#endif


//--------------------------------------------------
// Function Prototypes
//--------------------------------------------------
bit CHdmiFormatDetect(void);
bit CHdmiAudioFIFODetect(void);
void CHdmiAudioModeDetect(void);
bit CHdmiVideoSetting(void);
void CHdmiResetDAC(void);
void CHdmiAdjustDACSampleRate(BYTE ucModeType);
void CHdmiAudioWaitingFlagReadyEven(void);
void CHdmiAudioFirstTracking(void);
void CHdmiEnableAudioOutput(void);

#else

//--------------------------------------------------
// Extern Global Hdmi Table
//--------------------------------------------------
#if(_HDMI_SUPPORT == _ON)
extern BYTE code tHDMI_YPBPR_ITU601[];
extern BYTE code tHDMI_YPBPR_ITU709[];
#endif //End of #if(_HDMI_SUPPORT == _ON)

//--------------------------------------------------
// Extern Global Hdmi Edid Data
//--------------------------------------------------
#if(_HDMI_EDID == _ON)
extern BYTE code tHDMI_EDID_DATA[];
#endif //End of #if(_HDMI_EDID == _ON)


//--------------------------------------------------
// Extern Global Variables
//--------------------------------------------------
extern BYTE idata ucHdmiCtrl;
#if(_DAC_SUPPORT == _ON)
extern BYTE idata ucAudioRate;
#endif


//--------------------------------------------------
// Extern Function Prototypes
//--------------------------------------------------
extern bit CHdmiFormatDetect(void);
extern bit CHdmiAudioFIFODetect(void);
extern bit CHdmiVideoSetting(void);
extern void CHdmiAudioModeDetect(void);
extern void CHdmiResetDAC(void);
extern void CHdmiAdjustDACSampleRate(BYTE ucModeType);
extern void CHdmiAudioWaitingFlagReadyEven(void);
extern void CHdmiAudioFirstTracking(void);
extern void CHdmiEnableAudioOutput(void);

#endif


//----------------------------------------------------------------------------------------------------

//--------------------------------------------------
// Macro of Input source is the HDMI format
//--------------------------------------------------
#define GET_HDMIINPUT()             (bit)(ucHdmiCtrl & _BIT0)
#define SET_HDMIINPUT()             ucHdmiCtrl |= _BIT0
#define CLR_HDMIINPUT()             ucHdmiCtrl &= ~_BIT0


//--------------------------------------------------
// Macro of HDMI Audio PLL Lock Ready Flag
//--------------------------------------------------
#define GET_AUDIOPLLLOCKREADY()        (bit)(ucHdmiCtrl & _BIT1)
#define SET_AUDIOPLLLOCKREADY()        ucHdmiCtrl |= _BIT1
#define CLR_AUDIOPLLLOCKREADY()        ucHdmiCtrl &= ~_BIT1


//--------------------------------------------------
// Macro of HDMI Audio Resume Flag
//--------------------------------------------------
#define GET_AVRESUME()             (bit)(ucHdmiCtrl & _BIT2)
#define SET_AVRESUME()             ucHdmiCtrl |= _BIT2
#define CLR_AVRESUME()             ucHdmiCtrl &= ~_BIT2


//--------------------------------------------------
// Macro of HDMI Audio Waiting Time Flag
//--------------------------------------------------
#define GET_AUDIOWAITINGFLAG()     (bit)(ucHdmiCtrl & _BIT3)
#define SET_AUDIOWAITINGFLAG()     ucHdmiCtrl |= _BIT3
#define CLR_AUDIOWAITINGFLAG()     ucHdmiCtrl &= ~_BIT3


//--------------------------------------------------
// Macro of HDMI Audio Waiting Time Out Flag
//--------------------------------------------------
#define GET_AUDIOWAITINGTIMEOUT()  (bit)(ucHdmiCtrl & _BIT4)
#define SET_AUDIOWAITINGTIMEOUT()  ucHdmiCtrl |= _BIT4
#define CLR_AUDIOWAITINGTIMEOUT()  ucHdmiCtrl &= ~_BIT4


